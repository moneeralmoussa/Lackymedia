{% extends 'base_new.html.twig' %}
{% set title = 'Spesen' %}

{% block stylesheet %}
    <link href='/assets/fullcalendar/dist/fullcalendar.css' rel='stylesheet' />
    <link href='/assets/fullcalendar-scheduler/dist/scheduler.css' rel='stylesheet' />
    <link href="/assets/sweetalert2/dist/sweetalert2.min.css" rel="stylesheet">
    <link rel="stylesheet" type="text/css" href="/bundles/vehicle/css/bootstrap-datetimepicker.min.css" />
    <style>
        .fc-view-container .fc-resource-area tr{
            cursor: pointer;
        }
    </style>
{% endblock %}
{% block javascripts %}
    <script src='/assets/moment/min/moment-with-locales.min.js'></script>
    <script src='/assets/fullcalendar/dist/fullcalendar.js'></script>
    <script src='/assets/fullcalendar-scheduler/dist/scheduler.js'></script>
    <script src='/assets/fullcalendar/dist/locale/de.js'></script>
    <script src="/assets/sweetalert2/dist/sweetalert2.all.min.js"></script>
    <script type="text/javascript" src="/bundles/vehicle/js/bootstrap-datetimepicker.min.js"></script>
    <script src="/bundles/newApp/chart.js"></script>
{% endblock %}

{% block content %}
<!-- Fahrer -->
<div class="row">
	<div class="grid-item col-xs-12">
    	<div class="row">
    		{% embed "partials/box.html.twig" with {'class': 'col-xs-12 ', 'title': 'Monatsübersicht: ' ~ employee.name } %}
        		{% block content %}
                <img id="draw_workdays_img" src="/bundles/vehicle/css/graphics/loader.white.gif" style="display:none;" />
            		<div class="form-group">
                		<div class='input-group date' id='datetimepicker1'>
                    		<input id="input_id" type='text' class="form-control" />
                    		<span class="input-group-addon">
                        		<span class="glyphicon glyphicon-calendar"></span>
                    		</span>
                		</div>
            		</div>
                    <input type="hidden" id="changeWorkdayFormWorkday" value="" />
		<div class="box">
          <!-- /.box-header -->
            <div class="box-body">
              <div class="row">
                <div class="col-md-8">
                  <p class="text-center">
                    <strong id="Titleid"></strong>
                  </p>

                  <div id="divCanvas" class="chart">
                    <!-- Sales Chart Canvas -->
                    <canvas id="salesChart" style="height: 180px; width: 1072px;" height="180" width="1072"></canvas>
                  </div>
                  <!-- /.chart-responsive -->
                </div>
                <!-- /.col -->
                <div class="col-md-4">
                  <p class="text-center">
                    <strong>Statistik </strong>
                  </p>
                    <!-- /.progress-group -->
         
                  
                 {% if is_granted('ROLE_ADMIN') or is_granted('ROLE_PERSONAL') %}
                  <div class="progress-group">
                    <span class="progress-text">Abwesenheit Wohnort</span>
                    <span id="car2span" class="progress-number"><b>0</b>/0</span>
                      <div class="progress sm">
                      <div id="car2div" class="progress-bar progress-bar-aqua" style="width: 80%"></div>
                    </div>
                  </div>
                
                  <div class="progress-group">
                    <span class="progress-text">Spesenberechnung</span>
                    <span id="Spesenberechnungspan" class="progress-number"><b>0</b>/500€</span>

                    <div class="progress sm">
                      <div id="Spesenberechnung" class="progress-bar progress-bar-yellow bg-light-blue " style="width: 80%"></div>
                    </div>
                  </div>
                  {% else %}
                  <div class="progress-group">
                    <span class="progress-text">Spesenberechnung</span>
                    <span id="Spesenberechnungspan" class="progress-number"><b>0</b>/500€</span>

                    <div class="progress sm">
                      <div id="Spesenberechnung" class="progress-bar progress-bar-aqua" style="width: 80%"></div>
                    </div>
                  </div>
                  {% endif %}
                   <div class="progress-group">
                    <span class="progress-text">PKW</span>
                    <span id="carspan" class="progress-number"><b>0</b>/100</span>
                    <div class="progress sm">
                      <div id="cardiv" class="progress-bar progress-bar-red" style="width: 80%"></div>
                    </div>
                  </div>
                  <!-- /.progress-group -->
                  <div class="progress-group">
                    <span class="progress-text">Urlaub</span>
                    <span id="spanurlaubid" class="progress-number"><b>0</b>/0</span>

                    <div class="progress sm">
                      <div id="divurlaubid" class="progress-bar progress-bar-green" style="width: 80%"></div>
                    </div>
                  </div>
                   <!-- /.progress-group -->
                  <div class="progress-group">
                    <span class="progress-text">Krank</span>
                    <span id="spankrankid" class="progress-number"><b>0</b>/0</span>

                    <div class="progress sm">
                      <div id="divkrankid" class="progress-bar progress-bar-green bg-maroon-active " style="width: 80%"></div>
                    </div>
                  </div>
                  <!-- /.progress-group -->
                  <div class="progress-group">
                    <span class="progress-text">WochenEnde</span>
                    <span id="spanWochenEnde" class="progress-number"><b>0</b>/0</span>

                    <div class="progress sm">
                      <div id="divuWochenEnde" class="progress-bar progress-bar-yellow" style="width: 80%"></div>
                    </div>
                  </div>

                  <div class="progress-group">
                    <span class="progress-text">Feiertag</span>
                    <span id="publicHolidaysspan" class="progress-number"><b>0</b>/0</span>

                    <div class="progress sm">
                      <div id="publicHolidaysdiv" class="progress-bar progress-bar-yellow bg-purple-active" style="width: 80%"></div>
                    </div>
                  </div>
                  <!-- /.progress-group -->
                </div>
                <!-- /.col -->
              </div>
              <!-- /.row -->
            </div>
            <!-- ./box-body -->
            <div class="box-footer">
              <div class="row">
                <div class="col-sm-3 col-xs-6">
                  <div class="description-block border-right">
                    <h5 id="spasensumme" class="description-header">€0,0</h5>
                    <span class="description-text"> Spesen steuerfrei</span>
                  </div>
                  <!-- /.description-block -->
                </div>
                
                <!-- /.col -->
                <div class="col-sm-3 col-xs-6">
                  <div class="description-block border-right">
                    <h5 id="spasensumme2" class="description-header">€0,0</h5>
                    <span  class="description-text">Spesen steuerpflichtig</span>
                  </div>
                  <!-- /.description-block -->
                </div>
                <!-- /.col -->
                {% if is_granted('ROLE_ADMIN') or is_granted('ROLE_PERSONAL') %}
                <div class="col-sm-3 col-xs-6">
                  <div class="description-block border-right">
                   <h5 id="summeLKW" class="description-header">0,0 Stunden</h5>
                    <span class="description-text">Abwesenheit Wohnort</span>
                  </div>
                  <!-- /.description-block -->
                </div>
                <!-- /.col -->
                {% else %}
                 <div class="col-sm-3 col-xs-6">
                  <div class="description-block border-right">
                   <h5 id="WochenEnde" class="description-header">0,0 Stunden</h5>
                    <span class="description-text">Wochenende</span>
                  </div>
                  <!-- /.description-block -->
                </div>
                <!-- /.col -->
                {% endif %}
                <div class="col-sm-3 col-xs-6">
                  <div class="description-block">
                    <h5 id="summencar" class="description-header">0,0 Stunden</h5>
                    <span class="description-text">PKW</span>
                  </div>
                  <!-- /.description-block -->
                </div>
              </div>
              <!-- /.row -->
            </div>
            <!-- /.box-footer -->
          </div>
        		{% endblock %}
    		{% endembed %}
    	</div>
	</div>
</div>
<!-- End Fahrer -->
{% if is_granted('ROLE_ADMIN') or is_granted('ROLE_PERSONAL') %}
<div class="row">
	<div class="grid-item col-xs-12">
    	<div class="row">
			{% embed "partials/box.html.twig" with {'class': 'col-xs-12', 'title': 'Mitarbeiter wechseln' } %}
				{% block content %}
					<select class="changeEmployee form-control" onchange="location.assign('{{ path('expenses_employee_index_new') }}/'+$(this).val()+'/'+$('#datetimepicker1').data('DateTimePicker').date().format('YYYY-MM-DD'));">
						{% for tempEmployee in employees %}
							<option value="{{ tempEmployee.id }}"{% if tempEmployee.id == employee.id %} selected="selected"{% endif %}>{{ tempEmployee }}</option>
						{% endfor %}
					</select>
				{% endblock %}
    		{% endembed %}
    	</div>
	</div>
</div>
{% elseif '1'=='2' %}
<div class="row">
	<div class="grid-item col-xs-12">
    	<div class="row">
    		{% embed "partials/box.html.twig" with {'class': 'col-xs-12', 'title': 'Spesenantrag einreichen' } %}
				{% block content %}
					<div id="workday-wrapper-submit">
						<ul class="list-inline">
							<li>
								<button id="workday-submit" class="btn btn-info">Spesenantrag für {{ "now"|date_modify("-1 month")|date("F") }} einreichen</button>
							</li>
						</ul>
					</div>
				{% endblock %}
    		{% endembed %}
    	</div>
	</div>
</div>
{% endif %}
{% if '1' == '2' %}
<div class="row">
	<div class="grid-item col-xs-12">
    	<div class="row">
    		{% embed "partials/box.html.twig" with {'class': 'col-xs-12', 'title': 'Mitarbeiter: ' ~ employee.name } %}
				{% block content %}
					<div id="coordinates" class="col-xs-12"></div>
                	<table class="table table-hover">
                    	<thead>
                    	</thead>
                    	<tbody>
                        	<tr>
                            	<th>{% trans %}Wohnort{% endtrans %}</th>
                            	<td>{{ employee.street }}, {{ employee.zipCode }} {{ employee.town }}</td>
                        	</tr>
                        	<tr class="noprint">
								<th>{% trans %}Telefon{% endtrans %}</th>
								<td>{{ employee.phone }}</td>
							</tr>
							<tr class="noprint">
								<th>{% trans %}Mobil{% endtrans %}</th>
								<td>{{ employee.mobile }}</td>
							</tr>
							<tr class="noprint">
								<th>{% trans %}Fax{% endtrans %}</th>
								<td>{{ employee.fax }}</td>
							</tr>
							<tr class="noprint">
								<th>{% trans %}EMail{% endtrans %}</th>
								<td>{% if not employee.user is empty %}{{ employee.user.email }}{% endif %}</td>
							</tr>
						</tbody>
					</table>
            		{% if is_granted('ROLE_ADMIN') or is_granted('ROLE_PERSONAL') %}
            			<a href="{{ path('employee_show', { 'id': employee.id }) }}" class="btn btn-info pull-right">{% trans %}Stammdaten{% endtrans %}</a>
            		{% endif %}
        		{% endblock %}
    		{% endembed %}
    	</div>
	</div>
</div>
{% endif %}
<div class="row">
	<div class="grid-item col-xs-12">
    	<div class="row">
    		{% embed "partials/box.html.twig" with {'class': 'col-xs-12', 'title': 'Tagesübersicht: ' ~ employee.name } %}
        		{% block content %}
        			<img id="draw_workdays_img" src="/bundles/vehicle/css/graphics/loader.white.gif" style="display:none;" />
            		<div class="form-group hide">
                		<div class='input-group date' id='datetimepicker1'>
                    		<input id="input_id" type='text' class="form-control" />
                    		<span class="input-group-addon">
                        		<span class="glyphicon glyphicon-calendar"></span>
                    		</span>
                		</div>
            		</div>
            		<input type="hidden" id="changeWorkdayFormWorkday" value="" />

            		<div class="table-responsive">
                		<table class="table table-datatable1 table-striped table-hover table-condensed">
                    		<thead>
                        		<tr>
                                    <th>{% trans %}Datum{% endtrans %}</th>
                                    <th>{% trans %}W.Tag{% endtrans %}</th>
                                    <th>{% trans %}Anfangsort{% endtrans %}</th>
                                    <th>{% trans %}Endort{% endtrans %}</th>
                                    <th>{% trans %}Übernachtung{% endtrans %}</th>
                            		<th>{% trans %}Arbeitsanfang{% endtrans %}</th>
                                    <th>{% trans %}Arbeitsende{% endtrans %}</th>
								{% if is_granted('ROLE_ADMIN') or is_granted('ROLE_DISPOSITION') or is_granted('ROLE_ACCOUNTING') or is_granted('ROLE_PERSONAL') %}
                                	<th>{% trans %}Arbeitszeit{% endtrans %}</th>
                                    <th>{% trans %}Abwesenheit Wohnort{% endtrans %}</th>
                                {% endif %}
									<th>{% trans %}Überstunden{% endtrans %}</th>
									<th>{% trans %}Spesen steuerfrei{% endtrans %}</th>
									<th>{% trans %}Spesen steuerpflichtig{% endtrans %}</th>
                                    <th>{% trans %}Übernachtung Pauschale{% endtrans %}</th>
                                    <th></th>
								</tr>
                    		</thead>
                    		<tbody class="draw_activities_table">
                    		</tbody>
                		</table>
            		</div>
        		{% endblock %}
    		{% endembed %}
    	</div>
	</div>
</div>

{% if is_granted('ROLE_ADMIN') or is_granted('ROLE_DISPOSITION') or is_granted('ROLE_ACCOUNTING') or is_granted('ROLE_PERSONAL') %}
<div class="row">
{% else %}
<div class="row hide">
{% endif %}
	<div class="grid-item col-xs-12">
    	<div class="row">
    		{% embed "partials/box.html.twig" with {'class': 'col-xs-12 hidden-xs hidden-sm', 'title': 'Detail Ansicht: ' ~ employee.name } %}
        		{% block content %}
					<!--<div class="draw_activities" style="height:800px;width:100%;display:none;"></div>-->
					<div style="height:800px;width:100%;">
						<div id="calendar"></div>
					</div>
                    <!--  Begin edit delete EVENT PLW LKW -->
  {% if is_granted('ROLE_ADMIN') or is_granted('ROLE_DISPOSITION') or is_granted('ROLE_ACCOUNTING') or is_granted('ROLE_PERSONAL') %}
  <br>
                <div id="refresh" class="box box-danger box-solid" style="display: none;" onclick="$(this).hide();$('#calendar').fullCalendar('refetchEvents');">
                    <!--   <div class="box-header">
                    <h3 class="box-title">Loading state</h3>
                          </div> -->
                        <div class="box-body">
                        <center > manuelle Eingaben übernehmen </center>
                        </div>
                            <!-- /.box-body -->
                        <!-- Loading (remove the following to stop the loading)-->
                        <div class="overlay">
                        <i class="fa fa-refresh fa-spin"></i>
                        </div>
                        <!-- end loading -->
                    </div>

                    			<div class="nav-tabs-custom">
				<ul class="nav nav-tabs">
					<li class="active"><a href="#tab_1" data-toggle="tab"><span class="badge" style="font-size: 16px;">Manuelle Eingaben</span></a></li>
                    <li><a href="#tab_2" data-toggle="tab"><span class="badge" style="font-size: 16px;"> PKW-Fahrten</span></a></li>
				</ul>
				<div class="tab-content">
					<div class="tab-pane active" id="tab_1">
						<table id="restart" class="table table-condensed table-striped table-hover">
                    		<thead>
                        		<tr>
                                    <th>{% trans %}Start Datum{% endtrans %}</th>
                                    <th>{% trans %}Beginn{% endtrans %}</th>
                                    <th>{% trans %}Anfangsort{% endtrans %}</th>
                            		<th>{% trans %}Ende Datum{% endtrans %}</th>
                                    <th>{% trans %}Ende{% endtrans %}</th>
                                    <th>{% trans %}Endort{% endtrans %}</th>
							    	<th>{% trans %}Arbeitszeit{% endtrans %}</th>
                                    <th>{% trans %}Arbeitsbeginn zu Hause{% endtrans %}</th>
                                    <th>{% trans %}Arbeitsende zu Hause {% endtrans %}</th>
								    <th>{% trans %}Löschen{% endtrans %}</th>
								</tr>
                    		</thead>
                    		<tbody id="draw_activities_table_workdays">
                            </tbody>
                		</table>
            		</div>
                   <div class="tab-pane" id="tab_2">
					<table class="table table-condensed table-striped table-hover">
                    		<thead>
                        		<tr>
                                    <th>{% trans %}Start Datum{% endtrans %}</th>
                                    <th>{% trans %}Beginn{% endtrans %}</th>
                                    <th>{% trans %}Anfangsort{% endtrans %}</th>
                            		<th>{% trans %}Ende Datum{% endtrans %}</th>
                                    <th>{% trans %}Ende{% endtrans %}</th>
                                    <th>{% trans %}EndOrt{% endtrans %}</th>
							    	<th>{% trans %}Zeit{% endtrans %}</th>
                                    <th>{% trans %}Art der Fahrt{% endtrans %}</th>
                                    <th></th>
								</tr>
                    		</thead>
                    		<tbody id="draw_activities_tablecar">
                    		</tbody>
                		</table>
				  </div>
				</div>
			</div>

{% endif %}
                    <!-- End edit PLW LKW  -->
					<div class="table-responsive">
						<h2>{% trans %}Legende{% endtrans %}</h2>
						<table class="table table-striped table-hover table-condensed">
                         <tr><th>Anmeldung</th><th><i style='font-size: large' class='fa fa-credit-card'></i> <i style='font-size: large' class='fa fa-sign-in'></i></th></tr>
                         <tr><th>Abmeldung</th><th><i style='font-size: large' class='fa fa-sign-out'></i><i style='font-size: large' class='fa fa-credit-card'></i></th></tr>
							<tr><th>Arbeitsbeginn</th><th>Arbeitsende</th></tr>
							<tr style="background:#A46A1F;"><td colspan="2">in Bearbeitung</td></tr>
							<tr style="background:#747081;"><td colspan="2">PKW</td></tr>
							<tr style="background:#95a5a6;"><td colspan="2">Schule</td></tr>
							<tr style="background:#8DB87C;"><td>zu Hause</td><td>zu Hause</td></tr>
							<tr style="background:#AAD0CD;"><td>zu Hause</td><td>im LKW</td></tr>
							<tr style="background:#CC5750;"><td>im LKW</td><td>im LKW</td></tr>
							<tr style="background:#E4DBBF;"><td>im LKW</td><td>zu Hause</td></tr>
						</table>
					</div>
        		{% endblock %}
    		{% endembed %}
    	</div>
	</div>
</div>


    <script src="https://maps.googleapis.com/maps/api/js?v=3.exp&key=AIzaSyDRT-dvbz9V3wxObDtziSUesCxXGMN6E2M"></script>
    <script type="text/javascript">
      var getDaysInMonth = function(month,year) {
                             return new Date(year, month, 0).getDate();
                        };
        var tasks;
        var sumdays;
        var taskNames;
        var gantt = false;
        var workday = false;
        var workdays = {};
        var countries_named = {};
        var countries = [];
        var monthexpenses;
        {% for country in countries %}
            countries_named['{{country.countryISO}}'] = { 'id':{{country.id}},'name':'{{country.countryName}}','expenses8h':{{country.expenses8h}},'expenses24h':{{country.expenses24h}} };
            countries.push({ 'id':{{country.id}},'name':'{{country.countryName}}','expenses8h':{{country.expenses8h}},'expenses24h':{{country.expenses24h}} });
        {% endfor %}
        var trucks = [];
        {% for truck in trucks %}
            trucks.push({ 'id':{{truck.id}},'name':'{{truck}}' });
        {% endfor %}

        {% if is_granted('ROLE_ADMIN') or is_granted('ROLE_PERSONAL') %}
        var expenseStatuses = [
            {'id':1,'name':'genehmigt',},
            {'id':2,'name':'abgelehnt',},
            {'id':3,'name':'in Bearbeitung',},
        ];
        {% endif %}
        var statusIdByName = {
            'in Bearbeitung':3,
            'abgelehnt':2,
            'AUTOMATIC':1,
            'MANUAL':1,
        };

        var publicHolidays = [];
       
        function isPublicHoliday(start) {
            if(publicHolidays.indexOf(start.format("YYYY-MM-DD")) > -1) {
                return true;
            }
            if(start.day()==6 || start.day()==0) {
                return true;
            }
            return false;
        }

        function fillZeros(i) {
            if (i < 10) {
                i = '0'+i;
            }
            return i
        }

      
        function formatDate(d,k) {
            var ret = '';
            if (k) {
                ret += moment(d).format('DD.MM.YYYY HH:mm');
            } else {
				ret += moment(d).format('HH:mm');
			}
		//	console.log('d: ' + d);
		//	console.log('Format: ' + ret);
            return ret;
        }

        function formatDate2(d) {
            var ret = '';
            ret += moment(d).format('YYYY-MM-DD');
		  //console.log('d: ' + d);
		  //	console.log('Format2: ' + ret);
            return ret;
        }

        function formatDate3(d) {
            var ret = '';
			ret += moment(d).format('DD.MM.YYYY');
		//	console.log('d: ' + d);
		//	console.log('Format3: ' + ret);
            return ret;
        }

        function getCountryByCountryCode(countryCode) {
            if (countries_named[countryCode]) {
                return countries_named[countryCode];
            } else {
                return {'id':1};
            }
        }
        var startTime;
        function draw_json_workdays(json) {
            if (json) {
                tasks = [];
                looppindex=1;
                taskNames = [];
                activitiesTableTasks = {}
                activitiesTableTasks2 = {}
                workday = false;
                workdays = {};
                var id_salt = (new Date(moment())).getTime();
                var summen = [0,0,0,0,0,0];

                var lastPoint = {'lat':0,'lng':0};
                var lastVehicle = 1;
                var lastCountry = 1;

                $(".draw_activities_table").html("");
                $("#draw_activities_table_workdays").html("");
                $("#draw_activities_tablecar").html("");
                var taskStatus = {
                    "SUCCEEDED" : "bar",
                    "FAILED" : "bar-failed",
                    "RUNNING" : "bar-running",
                    "KILLED" : "bar-killed",
                    "SLEEPSATHOME" : "bar-sleeps-home",
                    "STARTSATHOME" : "bar-starts-home",
                    "FINISHESATHOME" : "bar-finishes-home",
                    "SLEEPSINTRUCK" : "bar-sleeps-truck",
                    "MANUAL" : "bar-source-manual",
                    "AUTOMATIC" : "bar-source-automatic",
                    "USECAR" : "bar-use-car",
                    "SCHOOL" : "bar-school",
                    "SCHOOLANDDRIVE" : "bar-school-and-drive",
                };

                /*json["taskNames"].forEach(function (v,i,a) {
                    taskNames.push(v);
                });*/
                
                  var statisticArrayLKw =[];
                  var statisticArrayPLW =[];
                  var expenses14=0;
                  var expenses28=0;
                  var expenses8=0;
                  var summencar =0 ;
                  var summenLKV =0 ;
                  var dayKey=0;
                  while(dayKey<31)
                  { statisticArrayLKw[dayKey]=0;
                   statisticArrayPLW [dayKey]=0; 
                   dayKey++;
                  }
                json["tasks"].forEach(function (v,i,a) {
                    var startTime = new Date(moment(v["start"]));
                    var endTime = new Date(moment(v["end"]));
                    var workingTime = v["workingTime"];
                    var overTime = v["overTime"];
                    var absenceHome = v["absenceHome"];
                    var task = {
                        "startDate":new Date(moment(v["start"])),
                        "startHome":v["startHome"],
                        "startTime":startTime,
                        "startPoint":v["startPoint"],
                        "endDate":new Date(moment(v["end"])),
                        "endHome":v["endHome"],
                        "endTime":endTime,
                        "endPoint":v["endPoint"],
                        "taskName":v["taskName"],
                        "location_status":v["location_status"],
                        "source_status":v["source_status"],
                        "id":v["id"]+"_"+id_salt,
                        "type":v["type"],
                        "itemId":v["itemId"],
                        "link":v["link"],
                        "vehicle":v["vehicle"],
                        "vehicle_id":v["vehicle_id"],
                        "country_id":v["country_id"],
                        "country":v["country"],
                        "workingTime":v["workingTime"],
                        "overTime":v["overTime"],
                        "absenceHome":v["absenceHome"],
                        "comment":v["comment"],
                    };
                    tasks.push(task);
                  //  console.log(v["itemId"].search("car_"));
                   
                     if (v["itemId"].search("trace_") < 0 ) {
                      
                        summencar += absenceHome -workingTime;
                        statisticArrayPLW[parseInt(moment(startTime).format('DD'))-1] = absenceHome -workingTime ;
                     }
                      if (v["itemId"].search("car") == 0) {
                       var reasonString;
                       if(v["reason"] == 1 ) reasonString='fahrt nach Hause / Zur Arbeit'; else if (v["reason"] == 2 ) reasonString= 'Besorgungsfahrt';
                          $("#draw_activities_tablecar").html($("#draw_activities_tablecar").html() +
                          '<tr'+((parseInt(moment(startTime).format('E')) >= 6)?' style="background:#ff9f89;"':'')+'>'+
                          '<td>'+moment(startTime).format("DD.MM.YYYY")+'</td><td>'
                          +formatDate(startTime,false)+'</td><td>(<span class="endAdressTable'+v["itemId"]+'">'+v["startPoint"]["town"]+'</span>)</td><td>'+moment(endTime).format('DD.MM.YYYY')+'</td><td>'
                          +formatDate(endTime,false)+'</td><td>(<span class="endAdressTable'+v["itemId"]+'">'+v["endPoint"]["town"]+'</span>)</td>'
                     +'<td>'+v["workingTime"]+'</td><td id="'+v["itemId"]+'"> '+reasonString+' <a class="btn btn-primary btn-xs" onclick="PKWreasonedit(\''+v["itemId"].substr(4)+'\',\''+reasonString+'\');"> <i class="fa fa-save"> </i> </a></td><td><a href="/vehicleLogs/edit/'+ v["itemId"].substr(4) + '" style="color:black" target="_blank"><span class="label label-success badge"><font color="black"> <i class="fa fa-edit"> </i> Bearbeiten</font></span></a></td></tr>');}
                    if (v["itemId"].search("car_") < 0 && v["itemId"].search("school_") < 0) {
                        var expenses = calcExpenses(task);
                        if(workingTime > 25){workingTime=0; absenceHome=12;}
                        if(v['endHome'] ==1 ) var endHome= 'Ja'; else var endHome='Nein';
                        if(v['startHome'] ==1 ) var startHome= 'Ja'; else var startHome='Nein';
                        summenLKV += workingTime; 
                        summen[0] += workingTime; //(Math.round((endTime-startTime)/36000)/100);
                        summen[1] += overTime;
                        summen[2] += expenses.expensesFreeValue;
                        summen[3] += expenses.expensesExtraValue;
                        summen[4] += absenceHome; //(Math.round((endTime-startTime)/36000)/100);
                        summen[5] += expenses.expensesExtra2020Value;
                        if(expenses.expensesFreeValue == 14 )expenses14++;
                        if(expenses.expensesFreeValue == 28 )expenses28++;
                        if(expenses.expensesExtra2020Value == 8 )expenses8++;
                        lastVehicle = task['vehicle_id'];
                        monthexpenses = moment(startTime).format('YYYY-MM') ;
                        statisticArrayLKw[parseInt(moment(startTime).format('DD'))-1] = workingTime ;
                       
                     activitiesTableTasks[formatDate2(startTime)] = {'html':'<td'+(statusIdByName[v["source_status"]]>1?' style="background:#a46a1f;"':'')
                     +'>'+moment(startTime).format('DD.MM.YYYY')+'</td><td>'+moment(startTime).format('dd')+'</td><td>(<span class="startAdressTable'+v["itemId"]+'">'
                     +v["startPoint"]["town"]+'</span>)</td><td>(<span class="endAdressTable'
                     +v["itemId"]+'">'+v["endPoint"]["town"]+'</span>)</td><td>'+((v["location_status"]=="SLEEPSINTRUCK" || v["location_status"]=="STARTSATHOME" )?'Ja':'Nein')+'</td><td>'
                     +formatDate(startTime,false)+' </td><td>'+formatDate(endTime,false)+' </td>'
                    {% if is_granted('ROLE_ADMIN') or is_granted('ROLE_DISPOSITION') or is_granted('ROLE_ACCOUNTING') or is_granted('ROLE_PERSONAL') %}
                     +'<td>'+workingTime.toFixed(2)+'</td><td>'+absenceHome.toFixed(2)+'</td>'
                    {% endif %}
                     +'<td>'+overTime+'</td>'+'<td>'+expenses.expensesFreeValue
                     +' €</td><td>'+expenses.expensesExtraValue+' €</td><td>'+expenses.expensesExtra2020Value+' €</td><td><a href="#"><span class="label label-success badge" onclick=clickActivityTableEvent("'+v["itemId"]+'")><font color="black"> <i class="fa fa-edit"> </i> Bearbeiten</font></span></a></td>', 'task':task};
                     activitiesTableTasks2[formatDate2(startTime)] = {'html':'<td'+(statusIdByName[v["source_status"]]>1?' style="background:#a46a1f;"':'')
                     +'>'+moment(startTime).format('DD.MM.YYYY')+'</td><td>'+formatDate(startTime,false)+' </td><td>(<span class="startAdressTable'+v["itemId"]+'">'
                     +v["startPoint"]["town"]+'</span>)</td><td>'+moment(endTime).format('DD.MM.YYYY')+'</td><td>'+formatDate(endTime,false)+' </td><td>(<span class="endAdressTable'
                     +v["itemId"]+'">'+v["endPoint"]["town"]+'</span>)</td>'
                     +'<td>'+workingTime.toFixed(2)+'</td><td>'+startHome+'</td><td>'+endHome+'</td>'
                     +'<td><span onclick="DeleteWorkday('+v["itemId"].match(/(\d+)/)[0]+')"><span class="label label-danger badge"><font color="black"><i class="fa fa-trash"> </i> Löschen</font></span></span></td>'
                    ,'task':task};
                        var d=formatDate2(startTime);
                     if (v["itemId"].search("trace_") < 0) {
                        $("#draw_activities_table_workdays").html($("#draw_activities_table_workdays").html() +'<tr id="'+v["itemId"].match(/(\d+)/)[0]+'">'+activitiesTableTasks2[d]['html']+'</tr>');
                     }
						v=formatDate2(startTime);
                     var tag=parseInt(v.substring(8,10));
                        while( tag > looppindex  )
                            { 
                           
                        if(new moment(moment(startTime).format('YYYY-MM-'+looppindex)).format('d') == 0 || new moment(moment(v).format('YYYY-MM-'+looppindex)).format('d') == 6)
                            {
                            $(".draw_activities_table").html($(".draw_activities_table").html() +'<tr style="background-color: #68ff00;"><td><b>'+new moment(moment(startTime).format('YYYY-MM-'+looppindex)).format('DD-MM-YYYY')+'</b></td><td><b>'+new moment(moment(startTime).format('YYYY-MM-'+looppindex)).format('dd')+'</b></td></tr>');
                            }
                        else{
                            $(".draw_activities_table").html($(".draw_activities_table").html() +'<tr style="background-color: #ff1919;"><td><b>'+new moment(moment(startTime).format('YYYY-MM-'+looppindex)).format('DD-MM-YYYY')+'</b></td><td><b>'+new moment(moment(startTime).format('YYYY-MM-'+looppindex)).format('dd')+'</b></td></tr>');
                            }
                            looppindex++;
                         }
                        looppindex++;
                        $(".draw_activities_table").html($(".draw_activities_table").html() +'<tr'+((parseInt(moment(v).format('E')) >= 6)?' style="background:#ff9f89;"':'')+'>'+activitiesTableTasks[v]['html']+'</tr>');
                        lastPoint = activitiesTableTasks[v]['task']['endPoint'];
                        lastVehicle = activitiesTableTasks[v]['task']['vehicle_id'];
                        lastCountry = activitiesTableTasks[v]['task']['country_id'];
                        }
                });
                while ( sumdays >= looppindex)
                {
                   if(new moment(moment(monthexpenses).format('YYYY-MM-'+looppindex)).format('d') == 0 || new moment(moment(monthexpenses).format('YYYY-MM-'+looppindex)).format('d') == 6)
                   { $(".draw_activities_table").html($(".draw_activities_table").html() +'<tr style="background-color: #68ff00;"><td><b>'+new moment(moment(monthexpenses+'-'+looppindex).format('YYYY-MM-DD')).format('DD-MM-YYYY')+'</b></td><td><b>'+new moment(moment(monthexpenses+'-'+looppindex).format('YYYY-MM-DD')).format('dd')+'</b></td></tr>');}
                   else{
                    $(".draw_activities_table").html($(".draw_activities_table").html() +'<tr style="background-color: #ff1919;"><td><b>'+new moment(moment(monthexpenses+'-'+looppindex).format('YYYY-MM-DD')).format('DD-MM-YYYY')+'</b></td><td><b>'+new moment(moment(monthexpenses+'-'+looppindex).format('YYYY-MM-DD')).format('dd')+'</b></td></tr>');}
                    looppindex++;
                }
                looppindex=1;
                
                
                /*
                json["dayStrings"].forEach(function (v,i,a) {
                    if(activitiesTableTasks[v]) {
                        $(".draw_activities_table").html($(".draw_activities_table").html() +'<tr'+((parseInt(moment(v).format('E')) >= 6)?' style="background:#ff9f89;"':'')+'>'+activitiesTableTasks[v]['html']+'</tr>');
                        lastPoint = activitiesTableTasks[v]['task']['endPoint'];
                        lastVehicle = activitiesTableTasks[v]['task']['vehicle_id'];
                        lastCountry = activitiesTableTasks[v]['task']['country_id'];
                    } else {
                        newWorkday(v,lastPoint,lastVehicle,lastCountry);
                        $(".draw_activities_table").html($(".draw_activities_table").html() +'<tr'+((parseInt(moment(v).format('E')) >= 6)?' style="background:#ff9f89;"':'')+'><td>'+moment(v).format("DD.MM.YYYY")+'</td><td colspan="6"><a class="btn btn-success" href="#" onclick="saveWorkday(\''+v+'\');return false;" role="button">Arbeitstag hinzufügen</a></td></tr>');
                    }
                });
                */
         $("#spasensumme").html('€ '+ summen[2].toFixed(0));
         $("#spasensumme2").html('€ '+ summen[3].toFixed(0));
         $("#summeLKW").html('<i class="fa fa-user-clock"></i>' + summenLKV.toFixed(0) +' Stunden') ;
         $("#summencar").html('<i class="fa fa-user-clock"></i>' + summencar.toFixed(0) +' Stunden') ;
         $(".draw_activities_table").html($(".draw_activities_table").html() +'<tr><td><b>Summe:</b></td><td></td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>'
         {% if is_granted('ROLE_ADMIN') or is_granted('ROLE_DISPOSITION') or is_granted('ROLE_ACCOUNTING') or is_granted('ROLE_PERSONAL') %}
         +'<td>&nbsp;</td><td>&nbsp;</td>'
         {% endif %}
         +'<td><b>'+Math.round(summen[0]*100)/100+'</b></td><td><b>'+Math.round(summen[4]*100)/100+'</b></td><td><b>'+Math.round(summen[1]*100)/100+'</b></td><td><b>'+summen[2]+' €</b></td><td><b>'+summen[3]+' €</b></td><td><b>'+summen[5]+' €</b></td>{% if is_granted('ROLE_ADMIN') or is_granted('ROLE_PERSONAL') %}<td><a href="#"><span id="spanSaveexpenses" class="label label-success badge" onclick="saveajax({{employee.id}} ,'+expenses14+','+expenses28+','+expenses8+')"><font color="black"> <i class="fa fa-edit"> </i> Spesen zu Auszahlung einreichen</font></span></a></td>{% endif %}</tr>');
              if(sumdays === undefined )
        {
        $("#cardiv").css("width",'0%');
        $("#car2div").css("width",'0%');
        $("#Spesenberechnung").css("width",'0%');
        $("#publicHolidaysdiv").css("width",'0%');
        $("#divurlaubid").css("width",'0%');
        $("#divCanvas").html('<canvas id="salesChart" style="height: 180px; width: 1072px;" height="180" width="1072"></canvas>');
        }
         $("#carspan").html(summencar.toFixed(0)+" Stunden");
         $("#cardiv").css("width",(summencar * 100 )/100+'%');
         $("#car2span").html(summenLKV.toFixed(0)+" Stunden");
         $("#car2div").css("width",(summenLKV * 100 )/(sumdays*24)+'%');
         $("#Spesenberechnungspan").html((summen[2]+summen[3]).toFixed(0)+" €");
         $("#Spesenberechnung").css("width",( (summen[2]+summen[3]).toFixed(0) * 100 )/(500) +'%');
         function sundaysInMonth( m, y ) {
                var days = new Date( y,m,0 ).getDate();
                var saturdays = [ 7 - (new Date( m +'/01/'+ y ).getDay()) ];
                var sundays = [ 8 - (new Date( m +'/01/'+ y ).getDay()) ];
                for ( var i = sundays[0] + 7; i < days; i += 7 ) {
                    sundays.push( i );
           }
        sundays.push( saturdays[0] );
        for ( var i = saturdays[0] + 7; i < days; i += 7 ) {
            sundays.push( i );
        }
        return sundays.length;
        }
        $("#spanWochenEnde").html(sundaysInMonth( moment($('#datetimepicker1').data('DateTimePicker').date()).format("MM"),moment($('#datetimepicker1').data('DateTimePicker').date()).format("YYYY")) * 24 +" Stunden");
        $("#WochenEnde").html(sundaysInMonth( moment($('#datetimepicker1').data('DateTimePicker').date()).format("MM"),moment($('#datetimepicker1').data('DateTimePicker').date()).format("YYYY")) * 24 +" Stunden");
        $("#divuWochenEnde").css("width",(sundaysInMonth( moment($('#datetimepicker1').data('DateTimePicker').date()).format("MM"),moment($('#datetimepicker1').data('DateTimePicker').date()).format("YYYY")) * 24 * 100 )/(sumdays*24)+'%');
    }
$(function () {
  'use strict';
  // Get context with jQuery - using jQuery's .get() method.
  $("#divCanvas").html('<canvas id="salesChart" style="height: 180px; width: 1072px;" height="180" width="1072"></canvas>');
  var salesChartCanvas = $('#salesChart').get(0).getContext('2d');
  // This will get the first returned node in the jQuery collection.
  var salesChart = new Chart(salesChartCanvas);
  var labelsArray= new Array();
  console.log(statisticArrayLKw);
  console.log(statisticArrayPLW);

 for(var x=1; x<=sumdays ;x++)
  {labelsArray[x-1]=x ;}
  var salesChartData = {
    labels  : labelsArray,
    datasets: [
      {
        label               : 'LKW',
        fillColor           : 'rgb(0, 192, 239)',
        strokeColor         : 'rgb(0, 192, 239)',
        pointColor          : 'rgb(0, 192, 239)',
        pointStrokeColor    : '#c1c7d1',
        pointHighlightFill  : '#fff',
        pointHighlightStroke: 'rgb(0, 192, 239)',
        data                : statisticArrayLKw
      },
      {
        label               : 'PKW',
        fillColor           : 'rgb(221, 75, 57)',
        strokeColor         : 'rgb(221, 75, 57)',
        pointColor          : '#3b8bba',
        pointStrokeColor    : 'rgb(221, 75, 57)',
        pointHighlightFill  : '#fff',
        pointHighlightStroke: 'rgb(221, 75, 57)',
        data                : statisticArrayPLW
      },
      ]
  };
  var salesChartOptions = {
    // Boolean - If we should show the scale at all
    showScale               : true,
    // Boolean - Whether grid lines are shown across the chart
    scaleShowGridLines      : true,
    // String - Colour of the grid lines
    scaleGridLineColor      : 'rgba(0,0,0,.05)',
    // Number - Width of the grid lines
    scaleGridLineWidth      : 1,
    // Boolean - Whether to show horizontal lines (except X axis)
    scaleShowHorizontalLines: true,
    // Boolean - Whether to show vertical lines (except Y axis)
    scaleShowVerticalLines  : true,
    // Boolean - Whether the line is curved between points
    bezierCurve             : true,
    // Number - Tension of the bezier curve between points
    bezierCurveTension      : 0.3,
    // Boolean - Whether to show a dot for each point
    pointDot                : false,
    // Number - Radius of each point dot in pixels
    pointDotRadius          : 4,
    // Number - Pixel width of point dot stroke
    pointDotStrokeWidth     : 1,
    // Number - amount extra to add to the radius to cater for hit detection outside the drawn point
    pointHitDetectionRadius : 20,
    // Boolean - Whether to show a stroke for datasets
    datasetStroke           : true,
    // Number - Pixel width of dataset stroke
    datasetStrokeWidth      : 2,
    // Boolean - Whether to fill the dataset with a color
    datasetFill             : true,
    // String - A legend template
    
    // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
    maintainAspectRatio     : true,
    // Boolean - whether to make the chart responsive to window resizing
    responsive              : true
  };
  // Create the line chart
  salesChart.Line(salesChartData, salesChartOptions);
});

        }

        function load_workdays(workdays_date) {
            var load_workdays_url = "{{ path('expenses_workday_loadWorkdaysByMonth_short', {'employee_id':employee.id}) }}"+workdays_date;
            $("#draw_workdays_img").show();

            d3.json(load_workdays_url, function(error, json) {
                $("#draw_workdays_img").hide();
                if (error)
                    return console.warn(error);

                $(".draw_activities").show();
                $(".draw_activities .activitybar").off('click');

                draw_json_workdays(json);

                $(".draw_activities .activitybar").on('click',function(){
                    var activity;
                    for (activity of tasks) {
                        if (activity.id == this.id) break;
                    }
                    clickActivity(activity);
                });
            });
        }

        function saveWorkday(workday_id) {
            workdays[workday_id].startTime = new moment(workdays[workday_id].startTime).add(1, 'hours').toISOString();
            workdays[workday_id].endTime = new moment(workdays[workday_id].endTime).add(1, 'hours').toISOString();
            if (workdays[workday_id]['comment'] == '') {
                swal({
                    text: "Kommentar darf nicht leer sein!",
                    type: 'warning',
                });
            } else {
                var saveWorkday_url = "{{ path('expenses_workday_submit_create') }}";
                $.ajax({
					method: "POST",
					url: saveWorkday_url,
					data: workdays[workday_id]
                })
                .done(function( msg ) {
                    $('#calendar').fullCalendar( 'refetchEvents' );
                });
            }
        }

        function newWorkday(d,p,v,c) {
            myDate = moment(d).format("YYYY-MM-DD");
            workday = d;
            if (!workdays[workday]) {
                workdays[workday] = {"name":workday,"country_id":c,"employee":{{ employee.id }},"date":myDate,"startTime":myDate,"startPoint":p,"endTime":myDate,"endPoint":p};
                if (v) {
                    workdays[workday]["truck"] = v;
                }
            }
        }

        /*function setStartDate(start) {
            drivers[driver]["startTime"] = new Date(start["date"]);
            drivers[driver]["startPoint"] = start["point"];
        }

        function setEndDate(end) {
            drivers[driver]["endTime"] = new Date(end["date"]);
            drivers[driver]["endPoint"] = end["point"];
        }*/

        function addDays(date,days) {
            var ret = new Date(moment(date.toDateString()));
            ret.setDate(ret.getDate() + days);
            return ret;
        }

        function calcExpenses(activity) {
            var expensesFreeValue = 0;
            var expensesExtraValue = 0;
            var expensesExtra2020Value = 0;
            var finishingCountry = getCountryByCountryCode(activity["country"]);

            switch(activity["location_status"]) {
                case "STARTSATHOME":
                    var temp_date = new Date(moment(activity["startTime"]));
                    temp_date.setHours(16);
                    temp_date.setMinutes(0);
                    temp_date.setSeconds(0);
                    temp_date.setMilliseconds(0);

                    if (activity["workingTime"] >= 8 || activity["absenceHome"] >= 8 || activity["startTime"] < temp_date) {
                        expensesFreeValue = finishingCountry["expenses8h"];
                        expensesExtra2020Value = 8;
                        expensesExtraValue = {% if (not employee.contract is empty) and (not employee.contract.additionalExpenses8h is empty) %}{{ employee.contract.additionalExpenses8h }}{% else %}0{% endif %};
                    } else {
                        var temp_date = new Date(moment(activity["startTime"]));
                        var new_expense_calculation_date = new Date(moment('2018-01-01'));
                        if (temp_date >= new_expense_calculation_date && activity["absenceHome"] > 5) {
                            expensesExtraValue = {% if (not employee.contract is empty) and (not employee.contract.additionalExpenses8h is empty) %}{{ employee.contract.additionalExpenses8h }}{% else %}2{% endif %};
                        }
                    }
                    break;
                case "FINISHESATHOME":
                    var temp_date = new Date(moment(activity["endTime"]));
                    temp_date.setHours(8);
                    temp_date.setMinutes(0);
                    temp_date.setSeconds(0);
                    temp_date.setMilliseconds(0);

                    if (activity["workingTime"] >= 8 || activity["absenceHome"] >= 8 || activity["endTime"] > temp_date) {
                        expensesFreeValue = finishingCountry["expenses8h"];
                        expensesExtraValue = {% if (not employee.contract is empty) and (not employee.contract.additionalExpenses8h is empty) %}{{ employee.contract.additionalExpenses8h }}{% else %}0{% endif %};
                    } else {
                        var temp_date = new Date(moment(activity["startTime"]));
                        var new_expense_calculation_date = new Date(moment('2018-01-01'));
                        if (temp_date >= new_expense_calculation_date && activity["absenceHome"] > 5) {
                            expensesExtraValue = {% if (not employee.contract is empty) and (not employee.contract.additionalExpenses8h is empty) %}{{ employee.contract.additionalExpenses8h }}{% else %}2{% endif %};
                        }
                    }
                    break;
                case "SLEEPSINTRUCK":
                    expensesFreeValue = finishingCountry["expenses24h"];
                    expensesExtra2020Value = 8;
                    expensesExtraValue = {% if (not employee.contract is empty) and (not employee.contract.additionalExpenses24h is empty) %}{{ employee.contract.additionalExpenses24h }}{% else %}4{% endif %};
                    break;
                default:
                    if (activity["workingTime"] >= 8 || activity["absenceHome"] >= 8) {
                        expensesFreeValue = finishingCountry["expenses8h"];
                        expensesExtraValue = {% if (not employee.contract is empty) and (not employee.contract.additionalExpenses8h is empty) %}{{ employee.contract.additionalExpenses8h }}{% else %}0{% endif %};
                } else {
                        var temp_date = new Date(moment(activity["startTime"]));
                        var new_expense_calculation_date = new Date(moment('2018-01-01'));
                        if (temp_date >= new_expense_calculation_date && activity["absenceHome"] > 5) {
                            expensesExtraValue = {% if (not employee.contract is empty) and (not employee.contract.additionalExpenses8h is empty) %}{{ employee.contract.additionalExpenses8h }}{% else %}2{% endif %};
                        }
                    }
            }
            return {
                expensesFreeValue: expensesFreeValue,
                expensesExtraValue: expensesExtraValue,
                expensesExtra2020Value: expensesExtra2020Value,
            }
        }

        function redrawPopup(activity) {
            $('#timeDiff').html(activity["workingTime"]+" Stunden");
            var calculatedExpenses = calcExpenses(activity);
            $('#expensesFree').html(calculatedExpenses["expensesFreeValue"]+" €")
            $('#expensesExtra').html(calculatedExpenses["expensesExtraValue"]+" €")
        }

        function clickActivityTableEvent(idTask) {
        for(i=0 ; i< tasks.length ;i++) {
            if (idTask == tasks[i]["itemId"])
            {activity=tasks[i];}
        }
        
            var content;
            var countryOptions = '';
            var statusOptions = '';
            var truckOptions = '';
            

            $('.datetimepickerBegin').off('dp.change');
            $('.datetimepickerEnd').off('dp.change');

            if (activity["type"] == "create") {
                workday = activity["startDate"];
                activity["vehicle"] = trucks[0]["name"];
                activity["vehicle_id"] = trucks[0]["id"];
                var trucksById = {}
                trucks.forEach(function(s, i, o){
                    trucksById[s['id']] = s['name'];
                    truckOptions += "<option value=\""+s['id']+"\"";
                    if (activity["vehicle_id"] && activity["vehicle_id"] == s['id']) {
                        truckOptions += " selected=\"selected\"";
                    }
                    truckOptions += ">"+s['name']+"</option>";
                });
            }else {
                workday = activity["itemId"]; //{"name":activity["taskName"],"startTime":false,"endTime":false}
            }
            if (!workdays[workday]) {
                workdays[workday] = {"name":activity["vehicle"],"country_id":activity["country_id"],"employee":{{ employee.id }},"date":formatDate2(activity["startTime"]),"truck":activity["vehicle_id"],"startHome":activity["startHome"],"startTime":activity["startTime"],"startPoint":activity["startPoint"],"endHome":activity["endHome"],"endTime":activity["endTime"],"endPoint":activity["endPoint"],"status":statusIdByName[activity["source_status"]],"comment":activity["comment"]};
            }

            $('.datetimepickerBegin').off('dp.change');
            $('.datetimepickerEnd').off('dp.change');

            var calculatedExpenses = calcExpenses(activity);

            countries.forEach(function(s, i, o){
                countryOptions += "<option value=\""+s['id']+"\"";
                if (activity["country_id"] && activity["country_id"] == s['id']) {
                    countryOptions += " selected=\"selected\"";
                }
                countryOptions += ">"+s['name']+"</option>";
            });
            {% if is_granted('ROLE_ADMIN') or is_granted('ROLE_PERSONAL') %}
            expenseStatuses.forEach(function(s, i, o){
                statusOptions += "<option value=\""+s['id']+"\"";
                if (activity["source_status"] && activity["source_status"] == s['name']) {
                    statusOptions += " selected=\"selected\"";
                }
                statusOptions += ">"+s['name']+"</option>";
            });
            {% endif %}

            //content = "<div style=\"height:550px;\">"
            content = "<div>"
                    + "<div class=\"form-group\"><label class=\"control-label\" for=\"datetimepickerBegin\">{% trans %}Arbeitsbeginn{% endtrans %}</label><div class='input-group date datetimepickerBegin' id='datetimepickerBegin'><input type='text' class=\"form-control\" /><span class=\"input-group-addon\"><span class=\"glyphicon glyphicon-calendar\"></span></span></div></div>"
                    + "<div class=\"form-group\"><div><input class=\"startAdress form-control\" placeholder=\"Arbeitsbeginn Ort\" /><input class=\"startAdressLat\" type=\"hidden\" /><input class=\"startAdressLon\" type=\"hidden\" /></div></div>"
                    + "<div class=\"form-group\"><div class=\"checkbox\"><label><input class=\"startHome\" value=\"1\""+ (activity["startHome"]?" checked=\"checked\"":"") +" type=\"checkbox\">Arbeitsbeginn zu Hause</label></div></div>"
                    + "<div class=\"form-group\"><label class=\"control-label\" for=\"datetimepickerEnd\">{% trans %}Arbeitsende{% endtrans %}</label><div class='input-group date datetimepickerEnd' id='datetimepickerEnd'><input type='text' class=\"form-control\" /><span class=\"input-group-addon\"><span class=\"glyphicon glyphicon-calendar\"></span></span></div></div>"
                    + "<div class=\"form-group\"><div><input class=\"endAdress form-control\" placeholder=\"Arbeitsende Ort\" /><input class=\"endAdressLat\" type=\"hidden\" /><input class=\"endAdressLon\" type=\"hidden\" /></div></div>"
                    + "<div class=\"form-group\"><div class=\"checkbox\"><label><input class=\"endHome\" value=\"1\""+ (activity["endHome"]?" checked=\"checked\"":"") +" type=\"checkbox\">Arbeitsende zu Hause</label></div></div>"
                    + "<div class=\"form-group\"><label class=\"control-label\" for=\"expenseCountry\">{% trans %}Land für Spesenberechnung{% endtrans %}</label><div class='input-group' id='expenseCountry'><select class=\"form-control country_id\">" + countryOptions + "</select></div></div>"
                    + "<div class=\"form-group\"><label class=\"control-label\" for=\"usedTruck\">{% trans %}LKW{% endtrans %}</label><div class='input-group' id='usedTruck'><a href=\"{{ path('vehicle_detail_short') }}"+activity["vehicle_id"]+"/"+formatDate2(activity["startTime"])+"\" target=\"_blank\">"+activity["vehicle"]+"</a></div></div>"
                    + "<div class=\"form-group\"><label class=\"control-label\" for=\"comment\">{% trans %}Kommentar{% endtrans %}</label><div><input class=\"comment form-control\" value=\""+activity["comment"]+"\" /></div></div>";
            if (!activity["type"] == "create") {
                content = content
                        + "<div class=\"form-group\"><label class=\"control-label\" for=\"timeDiff\">{% trans %}Arbeitszeit{% endtrans %}</label><div class='input-group' id='timeDiff'>"+activity["workingTime"]+" Stunden</div></div>"
                        + "<div class=\"form-group\"><label class=\"control-label\" for=\"absenceHome\">{% trans %}Abwesenheit vom Wohnort{% endtrans %}</label><div class='input-group' id='absenceHome'>"+activity["absenceHome"]+" Stunden</div></div>"
                        + "<div class=\"form-group\"><label class=\"control-label\" for=\"expensesFree\">{% trans %}Spesen{% endtrans %} ({% trans %}steuerfrei{% endtrans %})</label><div class='input-group' id='expensesFree'>"+calculatedExpenses["expensesFreeValue"]+" €</div></div>"
                        + "<div class=\"form-group\"><label class=\"control-label\" for=\"expensesExtra\">{% trans %}Spesen{% endtrans %} ({% trans %}zusätzlich{% endtrans %})</label><div class='input-group' id='expensesExtra'>"+calculatedExpenses["expensesExtraValue"]+" €</div></div>";
            }
            content = content
            {% if is_granted('ROLE_ADMIN') or is_granted('ROLE_PERSONAL') %}
                    + "<div class=\"form-group\"><label class=\"control-label\" for=\"expenseStatus\">{% trans %}Status{% endtrans %}</label><div class='input-group' id='expenseStatus'><select class=\"form-control status_id\">" + statusOptions + "</select></div></div>"
            {% endif %}
/*                  + "<div class=\"form-group\"><label class=\"control-label\" for=\"timeDiff\">{% trans %}Arbeitszeit{% endtrans %}</label><div class='input-group' id='timeDiff'>"+activity["workingTime"]+" Stunden</div></div>"
                    + "<div class=\"form-group\"><label class=\"control-label\" for=\"absenceHome\">{% trans %}Abwesenheit vom Wohnort{% endtrans %}</label><div class='input-group' id='absenceHome'>"+activity["absenceHome"]+" Stunden</div></div>"
                    + "<div class=\"form-group\"><label class=\"control-label\" for=\"expensesFree\">{% trans %}Spesen{% endtrans %} ({% trans %}steuerfrei{% endtrans %})</label><div class='input-group' id='expensesFree'>"+calculatedExpenses["expensesFreeValue"]+" €</div></div>"
                    + "<div class=\"form-group\"><label class=\"control-label\" for=\"expensesExtra\">{% trans %}Spesen{% endtrans %} ({% trans %}zusätzlich{% endtrans %})</label><div class='input-group' id='expensesExtra'>"+calculatedExpenses["expensesExtraValue"]+" €</div></div>"
                    + "<div class=\"form-group\"><label class=\"control-label\" for=\"usedTruck\">{% trans %}LKW{% endtrans %}</label><div class='input-group' id='usedTruck'><a href=\"{{ path('vehicle_detail_short') }}"+activity["vehicle_id"]+"/"+formatDate2(activity["startTime"])+"\" target=\"_blank\">"+activity["vehicle"]+"</a></div></div>"
*/
                    + "<ul class=\"list-inline\">"
                    + "<li><a class=\"btn btn-lg btn-success\" href=\"#\" onclick=\"saveWorkday('"+workday+"');return false;\" role=\"button\">{% trans %}speichern{% endtrans %}</a></li>"
                    + "</ul>"
                    + "</div>";

            $('#modal-title').html("{% trans %}Status für{% endtrans %} "+activity["taskName"]);
            $('#modal-content').html(content);
            $('#modal').modal();

            if (activity["type"] == "create") {
                $("#usedTruck").html("<select class=\"form-control vehicle_id\">" + truckOptions + "</select>");
            }
            if(activity["startPoint"]){geocodeLatLng(activity["startPoint"],'.startAdress');}
            if(activity["endPoint"]){geocodeLatLng(activity["endPoint"],'.endAdress');}

            $("#changeWorkdayFormWorkday").val(workday);
            $('.datetimepickerBegin').datetimepicker({
                locale: 'de',
                defaultDate: activity["startTime"],
                date: activity["startTime"],
            });
            $('.datetimepickerBegin').on('dp.change', function(e){
                activity["startTime"] = new Date(moment(e.date.format('YYYY-MM-DD HH:mm:ss')));
                workdays[$("#changeWorkdayFormWorkday").val()]["startTime"] = activity["startTime"];
                redrawPopup(activity);
            });
            $('.datetimepickerEnd').datetimepicker({
                locale: 'de',
                defaultDate: activity["endTime"],
                date: activity["endTime"],
            });
            $('.datetimepickerEnd').on('dp.change', function(e){
                activity["endTime"] = new Date(moment(e.date.format('YYYY-MM-DD HH:mm:ss')));
                workdays[$("#changeWorkdayFormWorkday").val()]["endTime"] = activity["endTime"];
                redrawPopup(activity);
            });
            $('.country_id').on('change', function(){
                activity["country_id"] = $(this).val();
                workdays[$("#changeWorkdayFormWorkday").val()]["country_id"] = activity["country_id"];
                redrawPopup(activity);
            });
            if (activity["type"] == "create") {
                $('.vehicle_id').on('change', function(){
                    activity["vehicle_id"] = $(this).val();
                    activity["vehicle"] = trucksById[activity["vehicle_id"]];
                    workdays[$("#changeWorkdayFormWorkday").val()]["truck"] = activity["vehicle_id"];
                    workdays[$("#changeWorkdayFormWorkday").val()]["name"] = activity["vehicle"];
                    redrawPopup(activity);
                });
            }
            $('.status_id').on('change', function(){
                activity["status"] = $(this).val();
                workdays[$("#changeWorkdayFormWorkday").val()]["status"] = activity["status"];
                redrawPopup(activity);
            });
            $('.startHome').on('change', function(){
                activity["startHome"] = ($(this).prop('checked')?1:0);
                workdays[$("#changeWorkdayFormWorkday").val()]["startHome"] = activity["startHome"];
                redrawPopup(activity);
            });
            $('.endHome').on('change', function(){
                activity["endHome"] = ($(this).prop('checked')?1:0);
                workdays[$("#changeWorkdayFormWorkday").val()]["endHome"] = activity["endHome"];
                redrawPopup(activity);
            });
            $('.startAdress').on('change', function(){
                geocodeAddress($(this).val(),'startPoint',activity);
            });
            $('.endAdress').on('change', function(){
                geocodeAddress($(this).val(),'endPoint',activity);
            });
            $('.comment').on('change', function(){
                activity["comment"] = $(this).val();
                workdays[$("#changeWorkdayFormWorkday").val()]["comment"] = activity["comment"];
                redrawPopup(activity);
            });
        }

        function clickActivity(activity) {//console.log(activity);
            var content;
            var countryOptions = '';
            var statusOptions = '';
            var truckOptions = '';

            $('.datetimepickerBegin').off('dp.change');
            $('.datetimepickerEnd').off('dp.change');

            if (activity["type"] == "create") {
                workday = activity["startDate"];
                activity["vehicle"] = trucks[0]["name"];
                activity["vehicle_id"] = trucks[0]["id"];
                var trucksById = {}
                trucks.forEach(function(s, i, o){
                    trucksById[s['id']] = s['name'];
                    truckOptions += "<option value=\""+s['id']+"\"";
                    if (activity["vehicle_id"] && activity["vehicle_id"] == s['id']) {
                        truckOptions += " selected=\"selected\"";
                    }
                    truckOptions += ">"+s['name']+"</option>";
                });
            }else {
                workday = activity["itemId"]; //{"name":activity["taskName"],"startTime":false,"endTime":false}
            }
            if (!workdays[workday]) {
                workdays[workday] = {"name":activity["vehicle"],"country_id":activity["country_id"],"employee":{{ employee.id }},"date":formatDate2(activity["startTime"]),"truck":activity["vehicle_id"],"startHome":activity["startHome"],"startTime":activity["startTime"],"startPoint":activity["startPoint"],"endHome":activity["endHome"],"endTime":activity["endTime"],"endPoint":activity["endPoint"],"status":statusIdByName[activity["source_status"]],"comment":activity["comment"]};
            }

            $('.datetimepickerBegin').off('dp.change');
            $('.datetimepickerEnd').off('dp.change');

            var calculatedExpenses = calcExpenses(activity);

            countries.forEach(function(s, i, o){
                countryOptions += "<option value=\""+s['id']+"\"";
                if (activity["country_id"] && activity["country_id"] == s['id']) {
                    countryOptions += " selected=\"selected\"";
                }
                countryOptions += ">"+s['name']+"</option>";
            });
            {% if is_granted('ROLE_ADMIN') or is_granted('ROLE_PERSONAL') %}
            expenseStatuses.forEach(function(s, i, o){
                statusOptions += "<option value=\""+s['id']+"\"";
                if (activity["source_status"] && activity["source_status"] == s['name']) {
                    statusOptions += " selected=\"selected\"";
                }
                statusOptions += ">"+s['name']+"</option>";
            });
            {% endif %}

            //content = "<div style=\"height:550px;\">"
            content = "<div>"
                    + "<div class=\"form-group\"><label class=\"control-label\" for=\"datetimepickerBegin\">{% trans %}Arbeitsbeginn{% endtrans %}</label><div class='input-group date datetimepickerBegin' id='datetimepickerBegin'><input type='text' class=\"form-control\" /><span class=\"input-group-addon\"><span class=\"glyphicon glyphicon-calendar\"></span></span></div></div>"
                    + "<div class=\"form-group\"><div><input class=\"startAdress form-control\" placeholder=\"Arbeitsbeginn Ort\" /><input class=\"startAdressLat\" type=\"hidden\" /><input class=\"startAdressLon\" type=\"hidden\" /></div></div>"
                    + "<div class=\"form-group\"><div class=\"checkbox\"><label><input class=\"startHome\" value=\"1\""+ (activity["startHome"]?" checked=\"checked\"":"") +" type=\"checkbox\">Arbeitsbeginn zu Hause</label></div></div>"
                    + "<div class=\"form-group\"><label class=\"control-label\" for=\"datetimepickerEnd\">{% trans %}Arbeitsende{% endtrans %}</label><div class='input-group date datetimepickerEnd' id='datetimepickerEnd'><input type='text' class=\"form-control\" /><span class=\"input-group-addon\"><span class=\"glyphicon glyphicon-calendar\"></span></span></div></div>"
                    + "<div class=\"form-group\"><div><input class=\"endAdress form-control\" placeholder=\"Arbeitsende Ort\" /><input class=\"endAdressLat\" type=\"hidden\" /><input class=\"endAdressLon\" type=\"hidden\" /></div></div>"
                    + "<div class=\"form-group\"><div class=\"checkbox\"><label><input class=\"endHome\" value=\"1\""+ (activity["endHome"]?" checked=\"checked\"":"") +" type=\"checkbox\">Arbeitsende zu Hause</label></div></div>"
                    + "<div class=\"form-group\"><label class=\"control-label\" for=\"expenseCountry\">{% trans %}Land für Spesenberechnung{% endtrans %}</label><div class='input-group' id='expenseCountry'><select class=\"form-control country_id\">" + countryOptions + "</select></div></div>"
                    + "<div class=\"form-group\"><label class=\"control-label\" for=\"usedTruck\">{% trans %}LKW{% endtrans %}</label><div class='input-group' id='usedTruck'><a href=\"{{ path('vehicle_detail_short') }}"+activity["vehicle_id"]+"/"+formatDate2(activity["startTime"])+"\" target=\"_blank\">"+activity["vehicle"]+"</a></div></div>"
                    + "<div class=\"form-group\"><label class=\"control-label\" for=\"comment\">{% trans %}Kommentar{% endtrans %}</label><div><input class=\"comment form-control\" value=\""+activity["comment"]+"\" /></div></div>";
            if (!activity["type"] == "create") {
                content = content
                        + "<div class=\"form-group\"><label class=\"control-label\" for=\"timeDiff\">{% trans %}Arbeitszeit{% endtrans %}</label><div class='input-group' id='timeDiff'>"+activity["workingTime"]+" Stunden</div></div>"
                        + "<div class=\"form-group\"><label class=\"control-label\" for=\"absenceHome\">{% trans %}Abwesenheit vom Wohnort{% endtrans %}</label><div class='input-group' id='absenceHome'>"+activity["absenceHome"]+" Stunden</div></div>"
                        + "<div class=\"form-group\"><label class=\"control-label\" for=\"expensesFree\">{% trans %}Spesen{% endtrans %} ({% trans %}steuerfrei{% endtrans %})</label><div class='input-group' id='expensesFree'>"+calculatedExpenses["expensesFreeValue"]+" €</div></div>"
                        + "<div class=\"form-group\"><label class=\"control-label\" for=\"expensesExtra\">{% trans %}Spesen{% endtrans %} ({% trans %}zusätzlich{% endtrans %})</label><div class='input-group' id='expensesExtra'>"+calculatedExpenses["expensesExtraValue"]+" €</div></div>";
            }
            content = content
            {% if is_granted('ROLE_ADMIN') or is_granted('ROLE_PERSONAL') %}
                    + "<div class=\"form-group\"><label class=\"control-label\" for=\"expenseStatus\">{% trans %}Status{% endtrans %}</label><div class='input-group' id='expenseStatus'><select class=\"form-control status_id\">" + statusOptions + "</select></div></div>"
            {% endif %}
/*                  + "<div class=\"form-group\"><label class=\"control-label\" for=\"timeDiff\">{% trans %}Arbeitszeit{% endtrans %}</label><div class='input-group' id='timeDiff'>"+activity["workingTime"]+" Stunden</div></div>"
                    + "<div class=\"form-group\"><label class=\"control-label\" for=\"absenceHome\">{% trans %}Abwesenheit vom Wohnort{% endtrans %}</label><div class='input-group' id='absenceHome'>"+activity["absenceHome"]+" Stunden</div></div>"
                    + "<div class=\"form-group\"><label class=\"control-label\" for=\"expensesFree\">{% trans %}Spesen{% endtrans %} ({% trans %}steuerfrei{% endtrans %})</label><div class='input-group' id='expensesFree'>"+calculatedExpenses["expensesFreeValue"]+" €</div></div>"
                    + "<div class=\"form-group\"><label class=\"control-label\" for=\"expensesExtra\">{% trans %}Spesen{% endtrans %} ({% trans %}zusätzlich{% endtrans %})</label><div class='input-group' id='expensesExtra'>"+calculatedExpenses["expensesExtraValue"]+" €</div></div>"
                    + "<div class=\"form-group\"><label class=\"control-label\" for=\"usedTruck\">{% trans %}LKW{% endtrans %}</label><div class='input-group' id='usedTruck'><a href=\"{{ path('vehicle_detail_short') }}"+activity["vehicle_id"]+"/"+formatDate2(activity["startTime"])+"\" target=\"_blank\">"+activity["vehicle"]+"</a></div></div>"
*/
                    + "<ul class=\"list-inline\">"
                    + "<li><a class=\"btn btn-lg btn-success\" href=\"#\" onclick=\"saveWorkday('"+workday+"');return false;\" role=\"button\">{% trans %}Speichern{% endtrans %}</a></li>"
                    + "</ul>"
                    + "</div>";

            $('#modal-title').html("{% trans %}Status für{% endtrans %} "+activity["taskName"]);
            $('#modal-content').html(content);
            $('#modal').modal();

            if (activity["type"] == "create") {
                $("#usedTruck").html("<select class=\"form-control vehicle_id\">" + truckOptions + "</select>");
            }
            if(activity["startPoint"]){geocodeLatLng(activity["startPoint"],'.startAdress');}
            if(activity["endPoint"]){geocodeLatLng(activity["endPoint"],'.endAdress');}

            $("#changeWorkdayFormWorkday").val(workday);
            $('.datetimepickerBegin').datetimepicker({
                locale: 'de',
                defaultDate: activity["startTime"],
                date: activity["startTime"],
            });
            $('.datetimepickerBegin').on('dp.change', function(e){
                activity["startTime"] = new Date(moment(e.date.format('YYYY-MM-DD HH:mm:ss')));
                workdays[$("#changeWorkdayFormWorkday").val()]["startTime"] = activity["startTime"];
                redrawPopup(activity);
            });
            $('.datetimepickerEnd').datetimepicker({
                locale: 'de',
                defaultDate: activity["endTime"],
                date: activity["endTime"],
            });
            $('.datetimepickerEnd').on('dp.change', function(e){
                activity["endTime"] = new Date(moment(e.date.format('YYYY-MM-DD HH:mm:ss')));
                workdays[$("#changeWorkdayFormWorkday").val()]["endTime"] = activity["endTime"];
                redrawPopup(activity);
            });
            $('.country_id').on('change', function(){
                activity["country_id"] = $(this).val();
                workdays[$("#changeWorkdayFormWorkday").val()]["country_id"] = activity["country_id"];
                redrawPopup(activity);
            });
            if (activity["type"] == "create") {
                $('.vehicle_id').on('change', function(){
                    activity["vehicle_id"] = $(this).val();
                    activity["vehicle"] = trucksById[activity["vehicle_id"]];
                    workdays[$("#changeWorkdayFormWorkday").val()]["truck"] = activity["vehicle_id"];
                    workdays[$("#changeWorkdayFormWorkday").val()]["name"] = activity["vehicle"];
                    redrawPopup(activity);
                });
            }
            $('.status_id').on('change', function(){
                activity["status"] = $(this).val();
                workdays[$("#changeWorkdayFormWorkday").val()]["status"] = activity["status"];
                redrawPopup(activity);
            });
            $('.startHome').on('change', function(){
                activity["startHome"] = ($(this).prop('checked')?1:0);
                workdays[$("#changeWorkdayFormWorkday").val()]["startHome"] = activity["startHome"];
                redrawPopup(activity);
            });
            $('.endHome').on('change', function(){
                activity["endHome"] = ($(this).prop('checked')?1:0);
                workdays[$("#changeWorkdayFormWorkday").val()]["endHome"] = activity["endHome"];
                redrawPopup(activity);
            });
            $('.startAdress').on('change', function(){
                geocodeAddress($(this).val(),'startPoint',activity);
            });
            $('.endAdress').on('change', function(){
                geocodeAddress($(this).val(),'endPoint',activity);
            });
            $('.comment').on('change', function(){
                activity["comment"] = $(this).val();
                workdays[$("#changeWorkdayFormWorkday").val()]["comment"] = activity["comment"];
                redrawPopup(activity);
            });
        }

        function geocodeAddress(address,target,activity) {
            geocoder.geocode({'address': address}, function(results, status) {
            	if (status === 'OK') {
					var pos = results[0].geometry.location;
					var res = {lat:pos.lat(),lng:pos.lng(),town:address}
					activity[target] = res;
					workdays[$("#changeWorkdayFormWorkday").val()][target] = activity[target];
					redrawPopup(activity);
        		} else {
                	alert('Geocode was not successful for the following reason: ' + status);
            	}
            });
        }

        function geocodeLatLng(latlng,target) {
            if (latlng['town']) {
                $(target).val(latlng['town']);
            } else {
                geocoder.geocode({'location': latlng}, function(results, status) {
                	if (status === 'OK') {
                    	if (results[1]) {
                    		$(target).val(results[1].formatted_address);
							if (target == '.endAdress') {
								//$(".country_id").val(getCountryIdByCountryCode(results[results.length-1]["address_components"][0]["short_name"])['id']);
							}
                    	} else {
                    		window.alert('No results found');
                    	}
                	} else {
                    	window.alert('Geocoder failed due to: ' + status);
                	}
                });
            }
        }

        function geocodeLatLng2(latlng,target,curtask) {
            if (latlng['town']) {
                $(target+'Table'+tasks[curtask]["itemId"]).html(results[1].formatted_address);
                if (target == '.startAdress') {
                    geocodeLatLng2(tasks[curtask]["endPoint"],'.endAdress',curtask);
                } else if (curtask+1 < tasks.length) {
                    geocodeLatLng2(tasks[curtask+1]["startPoint"],'.startAdress',curtask+1);
                }
            } else {
                geocoder.geocode({'location': latlng}, function(results, status) {
                	if (status === 'OK') {
                    	if (results[1]) {
                    	//	console.log(target+'Table'+tasks[curtask]["itemId"]);
						//	console.log(results[1].formatted_address);
							$(target+'Table'+tasks[curtask]["itemId"]).html(results[1].formatted_address);
							if (target == '.startAdress') {
                        		geocodeLatLng2(tasks[curtask]["endPoint"],'.endAdress',curtask);
                    		} else if (curtask+1 < tasks.length) {
                        		geocodeLatLng2(tasks[curtask+1]["startPoint"],'.startAdress',curtask+1);
                    		}
                    	} else {
                    		window.alert('No results found');
                    	}
                	} else {
                    	window.alert('Geocoder failed due to: ' + status);
                	}
                });
            }
        }

        $( document ).ready(function() {
            /*$('#draw_activities_container').show();*/
            $('#datetimepicker1').datetimepicker({
                locale: 'de',
                format: 'MMM YYYY',
                defaultDate: '{{ base_date|date('n') }}/1/{{ base_date|date('Y') }}',
                date: '{{ base_date|date('n') }}/1/{{ base_date|date('Y') }}',
            });
            $('#datetimepicker1').on('dp.change', function(e){
                $('#calendar').fullCalendar( 'gotoDate', e.date);//(e.date.format('YYYY-MM-DD'));
            });

            var datepicker = new moment($('#datetimepicker1').data('DateTimePicker').date()).add(1, 'days').toISOString();
         //   console.log(datepicker);
            var bool = checkExpense({{employee.id}},datepicker);
            if(bool === false){
            	$('#workday-submit').prop("disabled",true);
            } else {
            	$('#workday-submit').prop("disabled",false);
            }

            $('#datetimepicker1').on('dp.update', function(e){
                var bool = checkExpense({{employee.id}},e.viewDate);
                if(bool === false){
                	$('#workday-submit').prop("disabled",true);
                } else {
                	$('#workday-submit').prop("disabled",false);
                }
            });
            /*load_workdays('{{ base_date|date('Y-m') }}-01');*/

            var cal = $('#calendar').fullCalendar({
                defaultDate: moment('{{ base_date|date('Y-m') }}-01'), //new Date()),
                header: {
                    left: 'today prev,next',
                    center: 'title',
                    right: 'agendaMonth,agendaWeek'
                },
                views: {
                    agendaMonth: {
                        type: 'agenda',
                        duration: { month: 1 },
                    }
                },
                height: 'parent',
                themeSystem: 'bootstrap3',
                defaultView: 'agendaMonth',
                schedulerLicenseKey: 'CC-Attribution-NonCommercial-NoDerivatives',
                locale: 'de',
                displayEventTime: true,
                nowIndicator: true,
                eventOverlap:true,
                businessHours: true,
                selectable: true,
                selectHelper: true,
                resourcesInitiallyExpanded: false,
                showNonCurrentDates: false,
                columnFormat: 'ddd D',
                select: function(start, end, event, view) {
                	var item = {
                        "startDate":moment(start).toISOString(),
                        "startTime":new Date(moment(start).toISOString()),
                        "endDate":moment(end).toISOString(),
                        "endTime":new Date(moment(end).toISOString()),
                        "taskName":event.name,
                        "status":"test", //event.status,
                        "id":event.id,
                        "type":"create",
                        "itemId":event.id,
                        "driver":event.driver,
                            "startHome":event.startHome,
                            "startPoint":event.startPoint,
                            "endHome":event.endHome,
                            "endPoint":event.endPoint,
                            "taskName":event.taskName,
                            "location_status":event.location_status,
                            "source_status":event.source_status,
                            "vehicle":event.vehicle,
                            "vehicle_id":event.vehicle_id,
                            "country_id":event.country_id,
                            "country":event.country,
                            "workingTime":event.workingTime,
                            "overTime":event.overTime,
                            "absenceHome":event.absenceHome,
                            "comment":'',
                    };
                    clickActivity(item);
                    $('#calendar').fullCalendar('unselect');
                },
                eventClick:  function(event, jsEvent, view) {console.log(event);
                    var item = {
                        "startDate":event.start,
                        "startTime":new Date(moment(event.start).toISOString()),
                        "startPoint":event.beginPosition,
                        "endDate":event.end,
                        "endTime":new Date(moment(event.end).toISOString()),
                        "endPoint":event.endPosition,
                        "taskName":event.name,
                        "status":"test", //event.status,
                        "id":event.id,
                        "type":event.type,
                        "itemId":event.id,
                        "driver":event.driver,
                            "startHome":event.startHome,
                            "startPoint":event.startPoint,
                            "endHome":event.endHome,
                            "endPoint":event.endPoint,
                            "taskName":event.taskName,
                            "location_status":event.location_status,
                            "source_status":event.source_status,
                            "vehicle":event.vehicle,
                            "vehicle_id":event.vehicle_id,
                            "country_id":event.country_id,
                            "country":event.country,
                            "workingTime":event.workingTime,
                            "overTime":event.overTime,
                            "absenceHome":event.absenceHome,
                            "comment":event.comment,
                    };
                    if (!event.background) {
                        clickActivity(item);
                    }
                },
                eventDrop: function(event, delta, revertFunc) {
                    var item = {
                        "startDate":event.start,
                        "startTime":new Date(moment(event.start).toISOString()),
                        "startPoint":event.beginPosition,
                        "endDate":event.end,
                        "endTime":new Date(moment(event.end).toISOString()),
                        "endPoint":event.endPosition,
                        "taskName":event.name,
                        "status":"test", //event.status,
                        "id":event.id,
                        "type":event.type,
                        "itemId":event.id,
                        "driver":event.driver,
                            "startHome":event.startHome,
                            "startPoint":event.startPoint,
                            "endHome":event.endHome,
                            "endPoint":event.endPoint,
                            "taskName":event.taskName,
                            "location_status":event.location_status,
                            "source_status":event.source_status,
                            "vehicle":event.vehicle,
                            "vehicle_id":event.vehicle_id,
                            "country_id":event.country_id,
                            "country":event.country,
                            "workingTime":event.workingTime,
                            "overTime":event.overTime,
                            "absenceHome":event.absenceHome,
                            "comment":event.comment,
                    };
                    if (!event.background) {
                        clickActivity(item);
                    }
                },
                eventResize: function(event, delta, revertFunc) {
                    var item = {
                        "startDate":event.start,
                        "startTime":new Date(moment(event.start).toISOString()),
                        "endDate":event.end,
                        "endTime":new Date(moment(event.end).toISOString()),
                        "taskName":event.name,
                        "status":"test", //event.status,
                        "id":event.id,
                        "type":event.type,
                        "itemId":event.id,
                        "driver":event.driver,
                            "startHome":event.startHome,
                            "startPoint":event.startPoint,
                            "endHome":event.endHome,
                            "endPoint":event.endPoint,
                            "taskName":event.taskName,
                            "location_status":event.location_status,
                            "source_status":event.source_status,
                            "vehicle":event.vehicle,
                            "vehicle_id":event.vehicle_id,
                            "country_id":event.country_id,
                            "country":event.country,
                            "workingTime":event.workingTime,
                            "overTime":event.overTime,
                            "absenceHome":event.absenceHome,
                            "comment":event.comment,
                    };
                    if (!event.background) {
                        clickActivity(item);
                    }
                },
                eventRender: function(event, element) {
                    if (event.publicHoliday) {
                        publicHolidays.push(event.start.format("YYYY-MM-DD"));
                    }
                    if (event.icon && event.title === 'Urlaub') {
                        element.css('background-color','#2ecc71');
                    }
                    element.find(".fc-title").css('color', '#000');
                    if(event.icon){
                        element.find(".fc-title").prepend("<i class='fa fa-"+event.icon+"'></i> ");
                    }
                     if(event.login == 'Yes' && event.logout == 'Yes'){
                        element.find(".fc-title").prepend("<i style='font-size: large' class='fa fa-credit-card'></i> <i style='font-size: large' class='fa fa-sign-in'></i><br><i style='font-size: large' class='fa fa-sign-out'></i><i style='font-size: large' class='fa fa-credit-card'></i>");
                    }
                     if(event.login == 'Yes' && event.logout == 'No'){
                        element.find(".fc-title").prepend("<i style='font-size: large' class='fa fa-credit-card'></i> <i style='font-size: large' class='fa fa-sign-in'></i> ");
                    }
                    if(event.login == 'No' && event.logout == 'Yes'){
                        element.find(".fc-title").prepend(" <i style='font-size: large' class='fa fa-sign-out'></i> <i style='font-size: large' class='fa fa-credit-card'></i> ");
                    }
                },
                editable: true,
                viewRender : function(view, element) {
                    $('#datetimepicker1').data('DateTimePicker').date($('#calendar').fullCalendar('getDate'));
                },
                eventSources: [
                    {
                        url: "{{ path('expenses_workday_loadWorkdaysByMonth_get_new', {'employee_id':employee.id}) }}",
                        success: function(msg){  
                            sumdays=getDaysInMonth( moment($('#datetimepicker1').data('DateTimePicker').date()).format("MM"), moment($('#datetimepicker1').data('DateTimePicker').date()).format("YYYY"));      
                            var json = {'tasks':msg};
                            draw_json_workdays(json);
                         }
                    },
                    {
                        url: "{{ path('calendar_jsonpublicholidays')}}",
                        success: function(msg){  
                            sumdays=getDaysInMonth( moment($('#datetimepicker1').data('DateTimePicker').date()).format("MM"), moment($('#datetimepicker1').data('DateTimePicker').date()).format("YYYY"));      
                            $("#Titleid").html(moment($('#datetimepicker1').data('DateTimePicker').date()).format("MMM YYYY"))
                            var json = {'jsonpublicholidays':msg};
                            calendar_jsonpublicholidays(json);
                            
                         }
                         
                    },
                    {
                        url: "{{ path('absence_json_background',{id:employee.id})}}",
                          success: function(msg){  
                              sumdays=getDaysInMonth( moment($('#datetimepicker1').data('DateTimePicker').date()).format("MM"), moment($('#datetimepicker1').data('DateTimePicker').date()).format("YYYY"));      
                            var json = {'absence_json':msg};
                            absence_json_background(json);
                            
                         }
                    },
                ],
                loading: function(isLoading, view) {
                    if(isLoading) {
                        $('#modal-content').html('<img src="/bundles/vehicle/css/graphics/loader.white.gif" />');
                        $('#modal').modal();
                    } else {
                        $('#modal').modal('hide');
                    }
                }
            });

            geocoder = new google.maps.Geocoder;

            $('#workday-submit').on('click', function(e){
            	swal({
					title: 'Spesenantrag einreichen',
					text: "Sind Sie sich sicher, dass Sie den Antrag einreichen wollen?",
					type: 'warning',
					showCancelButton: true,
					confirmButtonColor: '#3085d6',
					cancelButtonColor: '#d33',
					cancelButtonText: 'Nein',
					confirmButtonText: 'Ja'
            	}).then((result) => {
                	if (result.value) {
						var datepicker = $('#datetimepicker1').data('DateTimePicker').date().toISOString();
						$.ajax({
							method: "POST",
							url: '/expenses/employee/'+{{employee.id}}+'/submit',
							data: {
								current: datepicker
							}
						})
						.done(function( msg ) {
								if(msg.success === true){
								$('#workday-submit').prop("disabled",true);
								swal(
									'Spesenantrag',
									'Spesenantrag erfolgreich eingereicht.',
									'success'
								);
							}
						});
                	}
				});
            });

            function checkExpense(employee, date){
				date = new moment(date).toISOString();
				var output;
				$.ajax({
					method: "POST",
					url: '/expenses/employee/'+employee+'/check',
					async: false,
					data: {
						current: date
					}
				})
				.done(function( msg ) {
					output = msg.success;
					// if(msg.success === true){
					//   $(selectorToRemove).remove();
					// }
				});
				return output;
            }
        });

function calendar_jsonpublicholidays(json) {
    var lenghta=[];
    var lenghtap=[];
    var beginmonth=monthexpenses + '-01' ;
var endmonth=monthexpenses + '-' +sumdays ;
var jsonpublicholidays= json["jsonpublicholidays"];

for(var i = 0 ; i< jsonpublicholidays.length ;i++)
if(jsonpublicholidays[i]["start"] >= beginmonth && jsonpublicholidays[i]["publicHoliday"] == true)lenghta.push(json["jsonpublicholidays"][i]);
for(var i = 0 ; i< lenghta.length ;i++)
if(lenghta[i]["start"] <= endmonth && lenghta[i]["publicHoliday"] == true )lenghtap.push(lenghta[i]);
$("#publicHolidaysspan").html(lenghtap.length * 24 +" Stunden");
$("#publicHolidaysdiv").css("width",(lenghtap.length * 24 * 100 )/(sumdays*24)+'%');
}

function absence_json_background(json) {

var lenghta=[];
var urlaubs=[];
var Krank=[];
var j=0;
var kranknum=0;
var beginmonth=monthexpenses + '-01' ;
var endmonth=monthexpenses + '-' +sumdays ;
var jsonpublicholidays= json["absence_json"];
for(var i = 0 ; i< jsonpublicholidays.length ;i++)
if(jsonpublicholidays[i]["end"] >= beginmonth)
{if(jsonpublicholidays[i]["start"] <= beginmonth)json["absence_json"][i]["start"]=beginmonth;
    lenghta.push(json["absence_json"][i]);}
for(var i = 0 ; i< lenghta.length ;i++){
                                        if(lenghta[i]["start"] <= endmonth && lenghta[i]["title"] == "Urlaub" )urlaubs.push(lenghta[i]);
                                        if(lenghta[i]["start"] <= endmonth && (lenghta[i]["title"] == "Krank mit Krankenschein" || lenghta[i]["title"] =="Krank ohne Krankenschein"  ))Krank.push(lenghta[i]);
                                        }
for(var i = 0 ; i< urlaubs.length ;i++)
{ date      = parseInt(urlaubs[i]["start"].substring(8, 11));  
  enddate = parseInt(urlaubs[i]["end"].substring(8, 11));
  if (date > enddate){while (date<=sumdays ) { j++; date++; }}
  else if (date < enddate) while (date<enddate ) { j++; date++;}
 }
   $("#spanurlaubid").html(j * 24  +" Stunden");
   $("#divurlaubid").css("width",j * 24 * 100/(sumdays*24)+'%');
   j=0;

 for(var i = 0 ; i< Krank.length ;i++)
{ date      = parseInt(Krank[i]["start"].substring(8, 11));  
  enddate = parseInt(Krank[i]["end"].substring(8, 11));
  if (date > enddate){while (date<=sumdays ) { kranknum++; date++; }}
  else if (date < enddate) while (date<enddate ) { kranknum++; date++;}
 }
   $("#spankrankid").html(kranknum * 24  +" Stunden");
     $("#divkrankid").css("width",kranknum * 24 * 100/(sumdays*24)+'%');
  
}
{% if is_granted('ROLE_ADMIN') or is_granted('ROLE_PERSONAL') %}
  function DeleteWorkday(id)
        {
    swal({
    title: 'Bist du sicher?',
    text: "",
    type: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#3085d6',
    cancelButtonColor: '#d33',
    confirmButtonText: 'Ja, Löschen!',
    cancelButtonText: 'Nein'
      //	inputValue: el.find('.fc-cell-text').text(),

  }).then(function(result) {
    if (result.value) {
        
      $.ajax({
        type: "GET",
        url: "/expenses/expensenew/deleteworkday/"+id,
        success: function(r) {
         $('#'+id).hide();
         $("#refresh").show();
        }
      });
    }
  });
          }
  function PKWreasonedit(id,reason){
swal({
    title: 'Bist du sicher?',
    text: "Art die Fahrt bearbeiten!",
    input: 'select',
    inputOptions: {
            fahrtnachHaus: 'fahrt nach Hause / Zur Arbeit',
            Besorgungsfahrt: 'Besorgungsfahrt',
        },
    inputPlaceholder: '-----',
    showCancelButton: true,
    confirmButtonColor: '#3085d6',
    cancelButtonColor: '#d33',
    confirmButtonText: 'Bearbeiten!',
     cancelButtonText: 'Nein',
    inputValidator: function (value) {
    return new Promise(function (resolve, reject) {
      if (value.substr(1,4) === reason.substr(1,4)) {
           swal({
                    type: 'info',
                    html: 'Das war: ' + reason
                })
      } else {resolve()
           
      }
    })
  }
}).then(function(result) {
    if(result.value == 'fahrtnachHaus' || result.value == 'Besorgungsfahrt')
    {if (result.value == 'fahrtnachHaus' ) var reasonId = 1 ;else var reasonId = 2;
      $.ajax({
        type: "GET",
        url: "/expenses/expensenew/editcarreason/"+id+"/"+reasonId ,
        success: function(r) {
         $('#'+id).hide();
         if( result.value == 'fahrtnachHaus' )
          { swal({
                    type: 'success',
                    html: 'Du hast: fahrt nach Hause / Zur Arbeit' ,
                });
           $("#car_"+id).html('<a class="btn btn-warning btn-xs" onclick="PKWreasonedit(\''+id+'\',\'fahrt nach Hause / Zur Arbeit\');">fahrt nach Hause / Zur Arbeit <i class="fa fa-save"> </i></a>');
           $("#refresh").show();
           }
         else{
          swal({
                   type: 'success',
                   html: 'Du  hast ausgewählt: Besorgungsfahrt' 
              });
           $("#car_"+id).html('<a class="btn btn-warning btn-xs" onclick="PKWreasonedit(\''+id+'\',\'Besorgungsfahrt\');">Besorgungsfahrt <i class="fa fa-save"> </i></a>');
           $("#refresh").show();
              }
          }
      });
    }
  });
 }

   function saveajax(employeeId,expenses14,expenses28,expenses8)
    {
    date = new moment($('#datetimepicker1').data('DateTimePicker').date());
    swal({
    title: 'Bist du sicher?',
    text: "",
    type: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#3085d6',
    cancelButtonColor: '#d33',
    confirmButtonText: 'Spesenabrechnung einreichen!',
    cancelButtonText: 'Nein'
      //	inputValue: el.find('.fc-cell-text').text(),

  }).then(function(result) {
    if (result.value) {
        
      $.ajax({
        type: "GET",
        url: "/finanzamt/save/"+employeeId+"/"+date.format('YYYY-MM-DD')+"/"+expenses14+"/"+expenses28+"/"+expenses8,
        success: function(r) {
             $('#spanSaveexpenses').removeClass("label-success");
             $('#spanSaveexpenses').addClass("label-danger");
         if(r == false){ 
            swal({
                    type: 'warning',
                    html: 'Spesenabrechnung ist schon ausgezahlt, Änderungen nicht mehr möglich!',
                })
         }
         if(r == true){ 
              swal({
                    type: 'info',
                    html: 'Spesenabrechnung eingereicht',
                })
         }
        }
      });
    }
  });
          }
{% endif %}
</script>
{% endblock %}
