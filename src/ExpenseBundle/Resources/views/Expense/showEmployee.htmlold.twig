{% extends 'base_new.html.twig' %}
{% set title = 'Spesen' %}

{% block stylesheet %}
    <link href='/assets/fullcalendar/dist/fullcalendar.css' rel='stylesheet' />
    <link href='/assets/fullcalendar-scheduler/dist/scheduler.css' rel='stylesheet' />
    <link href="/assets/sweetalert2/dist/sweetalert2.min.css" rel="stylesheet">
    <link rel="stylesheet" type="text/css" href="/bundles/vehicle/css/bootstrap-datetimepicker.min.css" />
    <style>
        .fc-view-container .fc-resource-area tr{
            cursor: pointer;
        }
    </style>
{% endblock %}

{% block javascripts %}
    <script src='/assets/moment/min/moment-with-locales.min.js'></script>
    <script src='/assets/fullcalendar/dist/fullcalendar.js'></script>
    <script src='/assets/fullcalendar-scheduler/dist/scheduler.js'></script>
    <script src='/assets/fullcalendar/dist/locale/de.js'></script>
    <script src="/assets/sweetalert2/dist/sweetalert2.all.min.js"></script>
    <script type="text/javascript" src="/bundles/vehicle/js/bootstrap-datetimepicker.min.js"></script>
{% endblock %}

{% block content %}
{% if is_granted('ROLE_ADMIN') or is_granted('ROLE_PERSONAL') %}
<div class="row">
	<div class="grid-item col-xs-12">
    	<div class="row">
			{% embed "partials/box.html.twig" with {'class': 'col-xs-12', 'title': 'Mitarbeiter wechseln' } %}
				{% block content %}
					<select class="changeEmployee form-control" onchange="location.assign('{{ path('expenses_employee_index') }}/'+$(this).val()+'/'+$('#datetimepicker1').data('DateTimePicker').date().format('YYYY-MM-DD'));">
						{% for tempEmployee in employees %}
							<option value="{{ tempEmployee.id }}"{% if tempEmployee.id == employee.id %} selected="selected"{% endif %}>{{ tempEmployee }}</option>
						{% endfor %}
					</select>
				{% endblock %}
    		{% endembed %}
    	</div>
	</div>
</div>
{% else %}
<div class="row">
	<div class="grid-item col-xs-12">
    	<div class="row">
    		{% embed "partials/box.html.twig" with {'class': 'col-xs-12', 'title': 'Spesenantrag einreichen' } %}
				{% block content %}
					<div id="workday-wrapper-submit">
						<ul class="list-inline">
							<li>
								<button id="workday-submit" class="btn btn-info">Spesenantrag für {{ "now"|date_modify("-1 month")|date("F") }} einreichen</button>
							</li>
						</ul>
					</div>
				{% endblock %}
    		{% endembed %}
    	</div>
	</div>
</div>
{% endif %}


<div class="row">
	<div class="grid-item col-xs-12">
    	<div class="row">
    		{% embed "partials/box.html.twig" with {'class': 'col-xs-12', 'title': 'Mitarbeiter: ' ~ employee.name } %}
				{% block content %}
					<div id="coordinates" class="col-xs-12"></div>
                	<table class="table table-hover">
                    	<thead>
                    	</thead>
                    	<tbody>
                        	<tr>
                            	<th>{% trans %}Wohnort{% endtrans %}</th>
                            	<td>{{ employee.street }}, {{ employee.zipCode }} {{ employee.town }}</td>
                        	</tr>
                        	<tr class="noprint">
								<th>{% trans %}Telefon{% endtrans %}</th>
								<td>{{ employee.phone }}</td>
							</tr>
							<tr class="noprint">
								<th>{% trans %}Mobil{% endtrans %}</th>
								<td>{{ employee.mobile }}</td>
							</tr>
							<tr class="noprint">
								<th>{% trans %}Fax{% endtrans %}</th>
								<td>{{ employee.fax }}</td>
							</tr>
							<tr class="noprint">
								<th>{% trans %}EMail{% endtrans %}</th>
								<td>{% if not employee.user is empty %}{{ employee.user.email }}{% endif %}</td>
							</tr>
						</tbody>
					</table>
            		{% if is_granted('ROLE_ADMIN') or is_granted('ROLE_PERSONAL') %}
            			<a href="{{ path('employee_show', { 'id': employee.id }) }}" class="btn btn-info pull-right">{% trans %}Stammdaten{% endtrans %}</a>
            		{% endif %}
        		{% endblock %}
    		{% endembed %}
    	</div>
	</div>
</div>

<div class="row">
	<div class="grid-item col-xs-12">
    	<div class="row">
    		{% embed "partials/box.html.twig" with {'class': 'col-xs-12', 'title': 'Arbeitstage: ' ~ employee.name } %}
        		{% block content %}
        			<img id="draw_workdays_img" src="/bundles/vehicle/css/graphics/loader.white.gif" style="display:none;" />
            		<div class="form-group">
                		<div class='input-group date' id='datetimepicker1'>
                    		<input type='text' class="form-control" />
                    		<span class="input-group-addon">
                        		<span class="glyphicon glyphicon-calendar"></span>
                    		</span>
                		</div>
            		</div>
            		<input type="hidden" id="changeWorkdayFormWorkday" value="" />

            		<div class="table-responsive">
                		<table class="table table-datatable1 table-striped table-hover table-condensed">
                    		<thead>
                        		<tr>
                                    <th>{% trans %}Beginn{% endtrans %}</th>
                                    <th>{% trans %}BeginnUhr{% endtrans %}</th>
                                    <th>{% trans %}BeginnOrt{% endtrans %}</th>
                            		<th>{% trans %}Ende{% endtrans %}</th>
                                    <th>{% trans %}EndeUhr{% endtrans %}</th>
                                    <th>{% trans %}EndeOrt{% endtrans %}</th>
									<th>{% trans %}Stunden{% endtrans %}</th>
									<th>{% trans %}Abwesenheit Wohnort{% endtrans %}</th>
									<th>{% trans %}Überstunden{% endtrans %}</th>
									<th>{% trans %}Spesen stf.{% endtrans %}</th>
									<th>{% trans %}Spesen st.{% endtrans %}</th>
								</tr>
                    		</thead>
                    		<tbody class="draw_activities_table">
                    		</tbody>
                		</table>
            		</div>
        		{% endblock %}
    		{% endembed %}
    	</div>
	</div>
</div>

<div class="row">
	<div class="grid-item col-xs-12">
    	<div class="row">
    		{% embed "partials/box.html.twig" with {'class': 'col-xs-12 hidden-xs hidden-sm', 'title': 'Kalender: ' ~ employee.name } %}
        		{% block content %}
					<!--<div class="draw_activities" style="height:800px;width:100%;display:none;"></div>-->
					<div style="height:800px;width:100%;">
						<div id="calendar"></div>
					</div>

					<div class="table-responsive">
						<h2>{% trans %}Legende{% endtrans %}</h2>
						<table class="table table-striped table-hover table-condensed">
							<tr><th>Arbeitsbeginn</th><th>Arbeitsende</th></tr>
							<tr style="background:#A46A1F;"><td colspan="2">in Bearbeitung</td></tr>
							<tr style="background:#747081;"><td colspan="2">PKW</td></tr>
							<tr style="background:#95a5a6;"><td colspan="2">Schule</td></tr>
							<tr style="background:#8DB87C;"><td>zu Hause</td><td>zu Hause</td></tr>
							<tr style="background:#AAD0CD;"><td>zu Hause</td><td>im LKW</td></tr>
							<tr style="background:#CC5750;"><td>im LKW</td><td>im LKW</td></tr>
							<tr style="background:#E4DBBF;"><td>im LKW</td><td>zu Hause</td></tr>
						</table>
					</div>
        		{% endblock %}
    		{% endembed %}
    	</div>
	</div>
</div>


    <script src="https://maps.googleapis.com/maps/api/js?v=3.exp&key=AIzaSyDRT-dvbz9V3wxObDtziSUesCxXGMN6E2M"></script>
    <script type="text/javascript">
        var tasks;
        var taskNames;
        var gantt = false;
        var workday = false;
        var workdays = {};
        var countries_named = {};
        var countries = [];
        {% for country in countries %}
            countries_named['{{country.countryISO}}'] = { 'id':{{country.id}},'name':'{{country.countryName}}','expenses8h':{{country.expenses8h}},'expenses24h':{{country.expenses24h}} };
            countries.push({ 'id':{{country.id}},'name':'{{country.countryName}}','expenses8h':{{country.expenses8h}},'expenses24h':{{country.expenses24h}} });
        {% endfor %}
        var trucks = [];
        {% for truck in trucks %}
            trucks.push({ 'id':{{truck.id}},'name':'{{truck}}' });
        {% endfor %}

        {% if is_granted('ROLE_ADMIN') or is_granted('ROLE_PERSONAL') %}
        var expenseStatuses = [
            {'id':1,'name':'genehmigt',},
            {'id':2,'name':'abgelehnt',},
            {'id':3,'name':'in Bearbeitung',},
        ];
        {% endif %}
        var statusIdByName = {
            'in Bearbeitung':3,
            'abgelehnt':2,
            'AUTOMATIC':1,
            'MANUAL':1,
        };

        var publicHolidays = [];
        function isPublicHoliday(start) {
            if(publicHolidays.indexOf(start.format("YYYY-MM-DD")) > -1) {
                return true;
            }
            if(start.day()==6 || start.day()==0) {
                return true;
            }
            return false;
        }

        function fillZeros(i) {
            if (i < 10) {
                i = '0'+i;
            }
            return i
        }
        function formatDate(d,k) {
            var ret = '';
            if (k) {
                ret += moment(d).format('DD.MM.YYYY HH:mm');
            } else {
				ret += moment(d).format('HH:mm');
			}
			console.log('d: ' + d);
			console.log('Format: ' + ret);
            return ret;
        }

        function formatDate2(d) {
            var ret = '';
            ret += moment(d).format('YYYY-MM-DD');
			console.log('d: ' + d);
			console.log('Format2: ' + ret);
            return ret;
        }

        function formatDate3(d) {
            var ret = '';
			ret += moment(d).format('DD.MM.YYYY');
			console.log('d: ' + d);
			console.log('Format3: ' + ret);
            return ret;
        }

        function getCountryByCountryCode(countryCode) {
            if (countries_named[countryCode]) {
                return countries_named[countryCode];
            } else {
                return {'id':1};
            }
        }

        function draw_json_workdays(json) {
            if (json) {
                tasks = [];
                taskNames = [];
                activitiesTableTasks = {}
                workday = false;
                workdays = {};
                var id_salt = (new Date(moment())).getTime();
                var summen = [0,0,0,0,0];

                var lastPoint = {'lat':0,'lng':0};
                var lastVehicle = 1;
                var lastCountry = 1;

                $(".draw_activities_table").html("");
                var taskStatus = {
                    "SUCCEEDED" : "bar",
                    "FAILED" : "bar-failed",
                    "RUNNING" : "bar-running",
                    "KILLED" : "bar-killed",
                    "SLEEPSATHOME" : "bar-sleeps-home",
                    "STARTSATHOME" : "bar-starts-home",
                    "FINISHESATHOME" : "bar-finishes-home",
                    "SLEEPSINTRUCK" : "bar-sleeps-truck",
                    "MANUAL" : "bar-source-manual",
                    "AUTOMATIC" : "bar-source-automatic",
                    "USECAR" : "bar-use-car",
                    "SCHOOL" : "bar-school",
                    "SCHOOLANDDRIVE" : "bar-school-and-drive",
                };

                /*json["taskNames"].forEach(function (v,i,a) {
                    taskNames.push(v);
                });*/
                json["tasks"].forEach(function (v,i,a) {
                    var startTime = new Date(moment(v["start"]));
                    var endTime = new Date(moment(v["end"]));
                    var workingTime = v["workingTime"];
                    var overTime = v["overTime"];
                    var absenceHome = v["absenceHome"];

                    var task = {
                        "startDate":new Date(moment(v["start"])),
                        "startHome":v["startHome"],
                        "startTime":startTime,
                        "startPoint":v["startPoint"],
                        "endDate":new Date(moment(v["end"])),
                        "endHome":v["endHome"],
                        "endTime":endTime,
                        "endPoint":v["endPoint"],
                        "taskName":v["taskName"],
                        "location_status":v["location_status"],
                        "source_status":v["source_status"],
                        "id":v["id"]+"_"+id_salt,
                        "type":v["type"],
                        "itemId":v["itemId"],
                        "link":v["link"],
                        "vehicle":v["vehicle"],
                        "vehicle_id":v["vehicle_id"],
                        "country_id":v["country_id"],
                        "country":v["country"],
                        "workingTime":v["workingTime"],
                        "overTime":v["overTime"],
                        "absenceHome":v["absenceHome"],
                        "comment":v["comment"],
                    };
                    tasks.push(task);

                    if (v["itemId"].search("car_") < 0 && v["itemId"].search("school_") < 0) {
                        var expenses = calcExpenses(task);

                        summen[0] += workingTime; //(Math.round((endTime-startTime)/36000)/100);
                        summen[1] += overTime;
                        summen[2] += expenses.expensesFreeValue;
                        summen[3] += expenses.expensesExtraValue;
                        summen[4] += absenceHome; //(Math.round((endTime-startTime)/36000)/100);
                        lastVehicle = task['vehicle_id'];

                     activitiesTableTasks[formatDate2(startTime)] = {'html':'<td'+(statusIdByName[v["source_status"]]>1?' style="background:#a46a1f;"':'')+'>'+moment(startTime).format('DD.MM.YYYY')+'</td><td>'+formatDate(startTime,false)+' </td><td>(<span class="startAdressTable'+v["itemId"]+'">'+v["startPoint"]["town"]+'</span>)</td><td>'+moment(startTime).format('DD.MM.YYYY')+'</td><td>'+formatDate(endTime,false)+' </td><td>(<span class="endAdressTable'+v["itemId"]+'">'+v["endPoint"]["town"]+'</span>)</td><td>'+workingTime+'</td><td>'+absenceHome+'</td><td>'+overTime+'</td><td>'+expenses.expensesFreeValue+' €</td><td>'+expenses.expensesExtraValue+' €</td>', 'task':task};
						v=formatDate2(startTime);
                        $(".draw_activities_table").html($(".draw_activities_table").html() +'<tr'+((parseInt(moment(v).format('E')) >= 6)?' style="background:#ff9f89;"':'')+'>'+activitiesTableTasks[v]['html']+'</tr>');
                        lastPoint = activitiesTableTasks[v]['task']['endPoint'];
                        lastVehicle = activitiesTableTasks[v]['task']['vehicle_id'];
                        lastCountry = activitiesTableTasks[v]['task']['country_id'];
                    }
                });
                /*json["dayStrings"].forEach(function (v,i,a) {
                    if(activitiesTableTasks[v]) {
                        $(".draw_activities_table").html($(".draw_activities_table").html() +'<tr'+((parseInt(moment(v).format('E')) >= 6)?' style="background:#ff9f89;"':'')+'>'+activitiesTableTasks[v]['html']+'</tr>');
                        lastPoint = activitiesTableTasks[v]['task']['endPoint'];
                        lastVehicle = activitiesTableTasks[v]['task']['vehicle_id'];
                        lastCountry = activitiesTableTasks[v]['task']['country_id'];
                    } else {
                        newWorkday(v,lastPoint,lastVehicle,lastCountry);
                        $(".draw_activities_table").html($(".draw_activities_table").html() +'<tr'+((parseInt(moment(v).format('E')) >= 6)?' style="background:#ff9f89;"':'')+'><td>'+moment(v).format("DD.MM.YYYY")+'</td><td colspan="6"><a class="btn btn-success" href="#" onclick="saveWorkday(\''+v+'\');return false;" role="button">Arbeitstag hinzufügen</a></td></tr>');
                    }
                });*/
                $(".draw_activities_table").html($(".draw_activities_table").html() +'<tr><td><b>Summe:</b></td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td><b>'+Math.round(summen[0]*100)/100+'</b></td><td><b>'+Math.round(summen[4]*100)/100+'</b></td><td><b>'+Math.round(summen[1]*100)/100+'</b></td><td><b>'+summen[2]+' €</b></td><td><b>'+summen[3]+' €</b></td></tr>');
            }
        }

        function load_workdays(workdays_date) {
            var load_workdays_url = "{{ path('expenses_workday_loadWorkdaysByMonth_short', {'employee_id':employee.id}) }}"+workdays_date;
            $("#draw_workdays_img").show();

            d3.json(load_workdays_url, function(error, json) {
                $("#draw_workdays_img").hide();
                if (error)
                    return console.warn(error);

                $(".draw_activities").show();
                $(".draw_activities .activitybar").off('click');

                draw_json_workdays(json);

                $(".draw_activities .activitybar").on('click',function(){
                    var activity;
                    for (activity of tasks) {
                        if (activity.id == this.id) break;
                    }
                    clickActivity(activity);
                });
            });
        }

        function saveWorkday(workday_id) {
            workdays[workday_id].startTime = new moment(workdays[workday_id].startTime).add(1, 'hours').toISOString();
            workdays[workday_id].endTime = new moment(workdays[workday_id].endTime).add(1, 'hours').toISOString();
            if (workdays[workday_id]['comment'] == '') {
                swal({
                    text: "Kommentar darf nicht leer sein!",
                    type: 'warning',
                });
            } else {
                var saveWorkday_url = "{{ path('expenses_workday_submit_create') }}";
                $.ajax({
					method: "POST",
					url: saveWorkday_url,
					data: workdays[workday_id]
                })
                .done(function( msg ) {
                    console.log( msg );
                    $('#calendar').fullCalendar( 'refetchEvents' );
                });
            }
        }

        function newWorkday(d,p,v,c) {
            myDate = moment(d).format("YYYY-MM-DD");
            workday = d;
            if (!workdays[workday]) {
                workdays[workday] = {"name":workday,"country_id":c,"employee":{{ employee.id }},"date":myDate,"startTime":myDate,"startPoint":p,"endTime":myDate,"endPoint":p};
                if (v) {
                    workdays[workday]["truck"] = v;
                }
            }
        }

        /*function setStartDate(start) {
            drivers[driver]["startTime"] = new Date(start["date"]);
            drivers[driver]["startPoint"] = start["point"];
        }

        function setEndDate(end) {
            drivers[driver]["endTime"] = new Date(end["date"]);
            drivers[driver]["endPoint"] = end["point"];
        }*/

        function addDays(date,days) {
            var ret = new Date(moment(date.toDateString()));
            ret.setDate(ret.getDate() + days);
            return ret;
        }

        function calcExpenses(activity) {
            var expensesFreeValue = 0;
            var expensesExtraValue = 0;
            var finishingCountry = getCountryByCountryCode(activity["country"]);

            switch(activity["location_status"]) {
                case "STARTSATHOME":
                    var temp_date = new Date(moment(activity["startTime"]));
                    temp_date.setHours(16);
                    temp_date.setMinutes(0);
                    temp_date.setSeconds(0);
                    temp_date.setMilliseconds(0);

                    if (activity["workingTime"] > 8 || activity["absenceHome"] > 8 || activity["startTime"] < temp_date) {
                        expensesFreeValue = finishingCountry["expenses8h"];
                        expensesExtraValue = {% if (not employee.contract is empty) and (not employee.contract.additionalExpenses8h is empty) %}{{ employee.contract.additionalExpenses8h }}{% else %}2{% endif %};
                    } else {
                        var temp_date = new Date(moment(activity["startTime"]));
                        var new_expense_calculation_date = new Date(moment('2018-01-01'));
                        if (temp_date >= new_expense_calculation_date && activity["absenceHome"] > 5) {
                            expensesExtraValue = {% if (not employee.contract is empty) and (not employee.contract.additionalExpenses8h is empty) %}{{ employee.contract.additionalExpenses8h }}{% else %}2{% endif %};
                        }
                    }
                    break;
                case "FINISHESATHOME":
                    var temp_date = new Date(moment(activity["endTime"]));
                    temp_date.setHours(8);
                    temp_date.setMinutes(0);
                    temp_date.setSeconds(0);
                    temp_date.setMilliseconds(0);

                    if (activity["workingTime"] > 8 || activity["absenceHome"] > 8 || activity["endTime"] > temp_date) {
                        expensesFreeValue = finishingCountry["expenses8h"];
                        expensesExtraValue = {% if (not employee.contract is empty) and (not employee.contract.additionalExpenses8h is empty) %}{{ employee.contract.additionalExpenses8h }}{% else %}2{% endif %};
                    } else {
                        var temp_date = new Date(moment(activity["startTime"]));
                        var new_expense_calculation_date = new Date(moment('2018-01-01'));
                        if (temp_date >= new_expense_calculation_date && activity["absenceHome"] > 5) {
                            expensesExtraValue = {% if (not employee.contract is empty) and (not employee.contract.additionalExpenses8h is empty) %}{{ employee.contract.additionalExpenses8h }}{% else %}2{% endif %};
                        }
                    }
                    break;
                case "SLEEPSINTRUCK":
                    expensesFreeValue = finishingCountry["expenses24h"];
                    expensesExtraValue = {% if (not employee.contract is empty) and (not employee.contract.additionalExpenses24h is empty) %}{{ employee.contract.additionalExpenses24h }}{% else %}8{% endif %};
                    break;
                default:
                    if (activity["workingTime"] > 8 || activity["absenceHome"] > 8) {
                        expensesFreeValue = finishingCountry["expenses8h"];
                        expensesExtraValue = {% if (not employee.contract is empty) and (not employee.contract.additionalExpenses8h is empty) %}{{ employee.contract.additionalExpenses8h }}{% else %}2{% endif %};
                    } else {
                        var temp_date = new Date(moment(activity["startTime"]));
                        var new_expense_calculation_date = new Date(moment('2018-01-01'));
                        if (temp_date >= new_expense_calculation_date && activity["absenceHome"] > 5) {
                            expensesExtraValue = {% if (not employee.contract is empty) and (not employee.contract.additionalExpenses8h is empty) %}{{ employee.contract.additionalExpenses8h }}{% else %}2{% endif %};
                        }
                    }
            }
            return {
                expensesFreeValue: expensesFreeValue,
                expensesExtraValue: expensesExtraValue,
            }
        }

        function redrawPopup(activity) {
            $('#timeDiff').html(activity["workingTime"]+" Stunden");
            var calculatedExpenses = calcExpenses(activity);
            $('#expensesFree').html(calculatedExpenses["expensesFreeValue"]+" €")
            $('#expensesExtra').html(calculatedExpenses["expensesExtraValue"]+" €")
        }

        function clickActivity(activity) {console.log(activity);
            var content;
            var countryOptions = '';
            var statusOptions = '';
            var truckOptions = '';

            $('.datetimepickerBegin').off('dp.change');
            $('.datetimepickerEnd').off('dp.change');

            if (activity["type"] == "create") {
                workday = activity["startDate"];
                activity["vehicle"] = trucks[0]["name"];
                activity["vehicle_id"] = trucks[0]["id"];
                var trucksById = {}
                trucks.forEach(function(s, i, o){
                    trucksById[s['id']] = s['name'];
                    truckOptions += "<option value=\""+s['id']+"\"";
                    if (activity["vehicle_id"] && activity["vehicle_id"] == s['id']) {
                        truckOptions += " selected=\"selected\"";
                    }
                    truckOptions += ">"+s['name']+"</option>";
                });
            }else {
                workday = activity["itemId"]; //{"name":activity["taskName"],"startTime":false,"endTime":false}
            }
            if (!workdays[workday]) {
                workdays[workday] = {"name":activity["vehicle"],"country_id":activity["country_id"],"employee":{{ employee.id }},"date":formatDate2(activity["startTime"]),"truck":activity["vehicle_id"],"startHome":activity["startHome"],"startTime":activity["startTime"],"startPoint":activity["startPoint"],"endHome":activity["endHome"],"endTime":activity["endTime"],"endPoint":activity["endPoint"],"status":statusIdByName[activity["source_status"]],"comment":activity["comment"]};
            }

            $('.datetimepickerBegin').off('dp.change');
            $('.datetimepickerEnd').off('dp.change');

            var calculatedExpenses = calcExpenses(activity);

            countries.forEach(function(s, i, o){
                countryOptions += "<option value=\""+s['id']+"\"";
                if (activity["country_id"] && activity["country_id"] == s['id']) {
                    countryOptions += " selected=\"selected\"";
                }
                countryOptions += ">"+s['name']+"</option>";
            });
            {% if is_granted('ROLE_ADMIN') or is_granted('ROLE_PERSONAL') %}
            expenseStatuses.forEach(function(s, i, o){
                statusOptions += "<option value=\""+s['id']+"\"";
                if (activity["source_status"] && activity["source_status"] == s['name']) {
                    statusOptions += " selected=\"selected\"";
                }
                statusOptions += ">"+s['name']+"</option>";
            });
            {% endif %}

            //content = "<div style=\"height:550px;\">"
            content = "<div>"
                    + "<div class=\"form-group\"><label class=\"control-label\" for=\"datetimepickerBegin\">{% trans %}Arbeitsbeginn{% endtrans %}</label><div class='input-group date datetimepickerBegin' id='datetimepickerBegin'><input type='text' class=\"form-control\" /><span class=\"input-group-addon\"><span class=\"glyphicon glyphicon-calendar\"></span></span></div></div>"
                    + "<div class=\"form-group\"><div><input class=\"startAdress form-control\" placeholder=\"Arbeitsbeginn Ort\" /><input class=\"startAdressLat\" type=\"hidden\" /><input class=\"startAdressLon\" type=\"hidden\" /></div></div>"
                    + "<div class=\"form-group\"><div class=\"checkbox\"><label><input class=\"startHome\" value=\"1\""+ (activity["startHome"]?" checked=\"checked\"":"") +" type=\"checkbox\">Arbeitsbeginn zu Hause</label></div></div>"
                    + "<div class=\"form-group\"><label class=\"control-label\" for=\"datetimepickerEnd\">{% trans %}Arbeitsende{% endtrans %}</label><div class='input-group date datetimepickerEnd' id='datetimepickerEnd'><input type='text' class=\"form-control\" /><span class=\"input-group-addon\"><span class=\"glyphicon glyphicon-calendar\"></span></span></div></div>"
                    + "<div class=\"form-group\"><div><input class=\"endAdress form-control\" placeholder=\"Arbeitsende Ort\" /><input class=\"endAdressLat\" type=\"hidden\" /><input class=\"endAdressLon\" type=\"hidden\" /></div></div>"
                    + "<div class=\"form-group\"><div class=\"checkbox\"><label><input class=\"endHome\" value=\"1\""+ (activity["endHome"]?" checked=\"checked\"":"") +" type=\"checkbox\">Arbeitsende zu Hause</label></div></div>"
                    + "<div class=\"form-group\"><label class=\"control-label\" for=\"expenseCountry\">{% trans %}Land für Spesenberechnung{% endtrans %}</label><div class='input-group' id='expenseCountry'><select class=\"form-control country_id\">" + countryOptions + "</select></div></div>"
                    + "<div class=\"form-group\"><label class=\"control-label\" for=\"usedTruck\">{% trans %}LKW{% endtrans %}</label><div class='input-group' id='usedTruck'><a href=\"{{ path('vehicle_detail_short') }}"+activity["vehicle_id"]+"/"+formatDate2(activity["startTime"])+"\" target=\"_blank\">"+activity["vehicle"]+"</a></div></div>"
                    + "<div class=\"form-group\"><label class=\"control-label\" for=\"comment\">{% trans %}Kommentar{% endtrans %}</label><div><input class=\"comment form-control\" value=\""+activity["comment"]+"\" /></div></div>";
            if (!activity["type"] == "create") {
                content = content
                        + "<div class=\"form-group\"><label class=\"control-label\" for=\"timeDiff\">{% trans %}Arbeitszeit{% endtrans %}</label><div class='input-group' id='timeDiff'>"+activity["workingTime"]+" Stunden</div></div>"
                        + "<div class=\"form-group\"><label class=\"control-label\" for=\"absenceHome\">{% trans %}Abwesenheit vom Wohnort{% endtrans %}</label><div class='input-group' id='absenceHome'>"+activity["absenceHome"]+" Stunden</div></div>"
                        + "<div class=\"form-group\"><label class=\"control-label\" for=\"expensesFree\">{% trans %}Spesen{% endtrans %} ({% trans %}steuerfrei{% endtrans %})</label><div class='input-group' id='expensesFree'>"+calculatedExpenses["expensesFreeValue"]+" €</div></div>"
                        + "<div class=\"form-group\"><label class=\"control-label\" for=\"expensesExtra\">{% trans %}Spesen{% endtrans %} ({% trans %}zusätzlich{% endtrans %})</label><div class='input-group' id='expensesExtra'>"+calculatedExpenses["expensesExtraValue"]+" €</div></div>";
            }
            content = content
            {% if is_granted('ROLE_ADMIN') or is_granted('ROLE_PERSONAL') %}
                    + "<div class=\"form-group\"><label class=\"control-label\" for=\"expenseStatus\">{% trans %}Status{% endtrans %}</label><div class='input-group' id='expenseStatus'><select class=\"form-control status_id\">" + statusOptions + "</select></div></div>"
            {% endif %}
/*                    + "<div class=\"form-group\"><label class=\"control-label\" for=\"timeDiff\">{% trans %}Arbeitszeit{% endtrans %}</label><div class='input-group' id='timeDiff'>"+activity["workingTime"]+" Stunden</div></div>"
                    + "<div class=\"form-group\"><label class=\"control-label\" for=\"absenceHome\">{% trans %}Abwesenheit vom Wohnort{% endtrans %}</label><div class='input-group' id='absenceHome'>"+activity["absenceHome"]+" Stunden</div></div>"
                    + "<div class=\"form-group\"><label class=\"control-label\" for=\"expensesFree\">{% trans %}Spesen{% endtrans %} ({% trans %}steuerfrei{% endtrans %})</label><div class='input-group' id='expensesFree'>"+calculatedExpenses["expensesFreeValue"]+" €</div></div>"
                    + "<div class=\"form-group\"><label class=\"control-label\" for=\"expensesExtra\">{% trans %}Spesen{% endtrans %} ({% trans %}zusätzlich{% endtrans %})</label><div class='input-group' id='expensesExtra'>"+calculatedExpenses["expensesExtraValue"]+" €</div></div>"
                    + "<div class=\"form-group\"><label class=\"control-label\" for=\"usedTruck\">{% trans %}LKW{% endtrans %}</label><div class='input-group' id='usedTruck'><a href=\"{{ path('vehicle_detail_short') }}"+activity["vehicle_id"]+"/"+formatDate2(activity["startTime"])+"\" target=\"_blank\">"+activity["vehicle"]+"</a></div></div>"
*/
                    + "<ul class=\"list-inline\">"
                    + "<li><a class=\"btn btn-lg btn-success\" href=\"#\" onclick=\"saveWorkday('"+workday+"');return false;\" role=\"button\">{% trans %}Speichern{% endtrans %}</a></li>"
                    + "</ul>"
                    + "</div>";

            $('#modal-title').html("{% trans %}Status für{% endtrans %} "+activity["taskName"]);
            $('#modal-content').html(content);
            $('#modal').modal();

            if (activity["type"] == "create") {
                $("#usedTruck").html("<select class=\"form-control vehicle_id\">" + truckOptions + "</select>");
            }
            if(activity["startPoint"]){geocodeLatLng(activity["startPoint"],'.startAdress');}
            if(activity["endPoint"]){geocodeLatLng(activity["endPoint"],'.endAdress');}

            $("#changeWorkdayFormWorkday").val(workday);
            $('.datetimepickerBegin').datetimepicker({
                locale: 'de',
                defaultDate: activity["startTime"],
                date: activity["startTime"],
            });
            $('.datetimepickerBegin').on('dp.change', function(e){
                activity["startTime"] = new Date(moment(e.date.format('YYYY-MM-DD HH:mm:ss')));
                workdays[$("#changeWorkdayFormWorkday").val()]["startTime"] = activity["startTime"];
                redrawPopup(activity);
            });
            $('.datetimepickerEnd').datetimepicker({
                locale: 'de',
                defaultDate: activity["endTime"],
                date: activity["endTime"],
            });
            $('.datetimepickerEnd').on('dp.change', function(e){
                activity["endTime"] = new Date(moment(e.date.format('YYYY-MM-DD HH:mm:ss')));
                workdays[$("#changeWorkdayFormWorkday").val()]["endTime"] = activity["endTime"];
                redrawPopup(activity);
            });
            $('.country_id').on('change', function(){
                activity["country_id"] = $(this).val();
                workdays[$("#changeWorkdayFormWorkday").val()]["country_id"] = activity["country_id"];
                redrawPopup(activity);
            });
            if (activity["type"] == "create") {
                $('.vehicle_id').on('change', function(){
                    activity["vehicle_id"] = $(this).val();
                    activity["vehicle"] = trucksById[activity["vehicle_id"]];
                    workdays[$("#changeWorkdayFormWorkday").val()]["truck"] = activity["vehicle_id"];
                    workdays[$("#changeWorkdayFormWorkday").val()]["name"] = activity["vehicle"];
                    redrawPopup(activity);
                });
            }
            $('.status_id').on('change', function(){
                activity["status"] = $(this).val();
                workdays[$("#changeWorkdayFormWorkday").val()]["status"] = activity["status"];
                redrawPopup(activity);
            });
            $('.startHome').on('change', function(){
                activity["startHome"] = ($(this).prop('checked')?1:0);
                workdays[$("#changeWorkdayFormWorkday").val()]["startHome"] = activity["startHome"];
                redrawPopup(activity);
            });
            $('.endHome').on('change', function(){
                activity["endHome"] = ($(this).prop('checked')?1:0);
                workdays[$("#changeWorkdayFormWorkday").val()]["endHome"] = activity["endHome"];
                redrawPopup(activity);
            });
            $('.startAdress').on('change', function(){
                geocodeAddress($(this).val(),'startPoint',activity);
            });
            $('.endAdress').on('change', function(){
                geocodeAddress($(this).val(),'endPoint',activity);
            });
            $('.comment').on('change', function(){
                activity["comment"] = $(this).val();
                workdays[$("#changeWorkdayFormWorkday").val()]["comment"] = activity["comment"];
                redrawPopup(activity);
            });
        }

        function geocodeAddress(address,target,activity) {
            geocoder.geocode({'address': address}, function(results, status) {
            	if (status === 'OK') {
					var pos = results[0].geometry.location;
					var res = {lat:pos.lat(),lng:pos.lng(),town:address}
					activity[target] = res;
					workdays[$("#changeWorkdayFormWorkday").val()][target] = activity[target];
					redrawPopup(activity);
        		} else {
                	alert('Geocode was not successful for the following reason: ' + status);
            	}
            });
        }

        function geocodeLatLng(latlng,target) {
            if (latlng['town']) {
                $(target).val(latlng['town']);
            } else {
                geocoder.geocode({'location': latlng}, function(results, status) {
                	if (status === 'OK') {
                    	if (results[1]) {
                    		$(target).val(results[1].formatted_address);
							if (target == '.endAdress') {
								//$(".country_id").val(getCountryIdByCountryCode(results[results.length-1]["address_components"][0]["short_name"])['id']);
							}
                    	} else {
                    		window.alert('No results found');
                    	}
                	} else {
                    	window.alert('Geocoder failed due to: ' + status);
                	}
                });
            }
        }

        function geocodeLatLng2(latlng,target,curtask) {
            if (latlng['town']) {
                $(target+'Table'+tasks[curtask]["itemId"]).html(results[1].formatted_address);
                if (target == '.startAdress') {
                    geocodeLatLng2(tasks[curtask]["endPoint"],'.endAdress',curtask);
                } else if (curtask+1 < tasks.length) {
                    geocodeLatLng2(tasks[curtask+1]["startPoint"],'.startAdress',curtask+1);
                }
            } else {
                geocoder.geocode({'location': latlng}, function(results, status) {
                	if (status === 'OK') {
                    	if (results[1]) {
                    		console.log(target+'Table'+tasks[curtask]["itemId"]);
							console.log(results[1].formatted_address);
							$(target+'Table'+tasks[curtask]["itemId"]).html(results[1].formatted_address);
							if (target == '.startAdress') {
                        		geocodeLatLng2(tasks[curtask]["endPoint"],'.endAdress',curtask);
                    		} else if (curtask+1 < tasks.length) {
                        		geocodeLatLng2(tasks[curtask+1]["startPoint"],'.startAdress',curtask+1);
                    		}
                    	} else {
                    		window.alert('No results found');
                    	}
                	} else {
                    	window.alert('Geocoder failed due to: ' + status);
                	}
                });
            }
        }

        $( document ).ready(function() {
            /*$('#draw_activities_container').show();*/

            $('#datetimepicker1').datetimepicker({
                locale: 'de',
                format: 'MMM YYYY',
                defaultDate: '{{ base_date|date('n') }}/1/{{ base_date|date('Y') }}',
                date: '{{ base_date|date('n') }}/1/{{ base_date|date('Y') }}',
            });
            $('#datetimepicker1').on('dp.change', function(e){
                $('#calendar').fullCalendar( 'gotoDate', e.date);//(e.date.format('YYYY-MM-DD'));
            });

            var datepicker = new moment($('#datetimepicker1').data('DateTimePicker').date()).add(1, 'days').toISOString();
            console.log(datepicker);
            var bool = checkExpense({{employee.id}},datepicker);
            if(bool === false){
            	$('#workday-submit').prop("disabled",true);
            } else {
            	$('#workday-submit').prop("disabled",false);
            }

            $('#datetimepicker1').on('dp.update', function(e){
                var bool = checkExpense({{employee.id}},e.viewDate);
                if(bool === false){
                	$('#workday-submit').prop("disabled",true);
                } else {
                	$('#workday-submit').prop("disabled",false);
                }
            });
            /*load_workdays('{{ base_date|date('Y-m') }}-01');*/

            var cal = $('#calendar').fullCalendar({
                defaultDate: moment('{{ base_date|date('Y-m') }}-01'), //new Date()),
                header: {
                    left: 'today prev,next',
                    center: 'title',
                    right: 'agendaMonth,agendaWeek'
                },
                views: {
                    agendaMonth: {
                        type: 'agenda',
                        duration: { month: 1 },
                    }
                },
                height: 'parent',
                themeSystem: 'bootstrap3',
                defaultView: 'agendaMonth',
                schedulerLicenseKey: 'CC-Attribution-NonCommercial-NoDerivatives',
                locale: 'de',
                displayEventTime: true,
                nowIndicator: true,
                eventOverlap:true,
                businessHours: true,
                selectable: true,
                selectHelper: true,
                resourcesInitiallyExpanded: false,
                showNonCurrentDates: false,
                columnFormat: 'ddd D',
                select: function(start, end, event, view) {
                	var item = {
                        "startDate":moment(start).toISOString(),
                        "startTime":new Date(moment(start).toISOString()),
                        "endDate":moment(end).toISOString(),
                        "endTime":new Date(moment(end).toISOString()),
                        "taskName":event.name,
                        "status":"test", //event.status,
                        "id":event.id,
                        "type":"create",
                        "itemId":event.id,
                        "driver":event.driver,
                            "startHome":event.startHome,
                            "startPoint":event.startPoint,
                            "endHome":event.endHome,
                            "endPoint":event.endPoint,
                            "taskName":event.taskName,
                            "location_status":event.location_status,
                            "source_status":event.source_status,
                            "vehicle":event.vehicle,
                            "vehicle_id":event.vehicle_id,
                            "country_id":event.country_id,
                            "country":event.country,
                            "workingTime":event.workingTime,
                            "overTime":event.overTime,
                            "absenceHome":event.absenceHome,
                            "comment":'',
                    };
                    clickActivity(item);
                    $('#calendar').fullCalendar('unselect');
                },
                eventClick:  function(event, jsEvent, view) {console.log(event);
                    var item = {
                        "startDate":event.start,
                        "startTime":new Date(moment(event.start).toISOString()),
                        "startPoint":event.beginPosition,
                        "endDate":event.end,
                        "endTime":new Date(moment(event.end).toISOString()),
                        "endPoint":event.endPosition,
                        "taskName":event.name,
                        "status":"test", //event.status,
                        "id":event.id,
                        "type":event.type,
                        "itemId":event.id,
                        "driver":event.driver,
                            "startHome":event.startHome,
                            "startPoint":event.startPoint,
                            "endHome":event.endHome,
                            "endPoint":event.endPoint,
                            "taskName":event.taskName,
                            "location_status":event.location_status,
                            "source_status":event.source_status,
                            "vehicle":event.vehicle,
                            "vehicle_id":event.vehicle_id,
                            "country_id":event.country_id,
                            "country":event.country,
                            "workingTime":event.workingTime,
                            "overTime":event.overTime,
                            "absenceHome":event.absenceHome,
                            "comment":event.comment,
                    };
                    if (!event.background) {
                        clickActivity(item);
                    }
                },
                eventDrop: function(event, delta, revertFunc) {
                    var item = {
                        "startDate":event.start,
                        "startTime":new Date(moment(event.start).toISOString()),
                        "startPoint":event.beginPosition,
                        "endDate":event.end,
                        "endTime":new Date(moment(event.end).toISOString()),
                        "endPoint":event.endPosition,
                        "taskName":event.name,
                        "status":"test", //event.status,
                        "id":event.id,
                        "type":event.type,
                        "itemId":event.id,
                        "driver":event.driver,
                            "startHome":event.startHome,
                            "startPoint":event.startPoint,
                            "endHome":event.endHome,
                            "endPoint":event.endPoint,
                            "taskName":event.taskName,
                            "location_status":event.location_status,
                            "source_status":event.source_status,
                            "vehicle":event.vehicle,
                            "vehicle_id":event.vehicle_id,
                            "country_id":event.country_id,
                            "country":event.country,
                            "workingTime":event.workingTime,
                            "overTime":event.overTime,
                            "absenceHome":event.absenceHome,
                            "comment":event.comment,
                    };
                    if (!event.background) {
                        clickActivity(item);
                    }
                },
                eventResize: function(event, delta, revertFunc) {
                    var item = {
                        "startDate":event.start,
                        "startTime":new Date(moment(event.start).toISOString()),
                        "endDate":event.end,
                        "endTime":new Date(moment(event.end).toISOString()),
                        "taskName":event.name,
                        "status":"test", //event.status,
                        "id":event.id,
                        "type":event.type,
                        "itemId":event.id,
                        "driver":event.driver,
                            "startHome":event.startHome,
                            "startPoint":event.startPoint,
                            "endHome":event.endHome,
                            "endPoint":event.endPoint,
                            "taskName":event.taskName,
                            "location_status":event.location_status,
                            "source_status":event.source_status,
                            "vehicle":event.vehicle,
                            "vehicle_id":event.vehicle_id,
                            "country_id":event.country_id,
                            "country":event.country,
                            "workingTime":event.workingTime,
                            "overTime":event.overTime,
                            "absenceHome":event.absenceHome,
                            "comment":event.comment,
                    };
                    if (!event.background) {
                        clickActivity(item);
                    }
                },
                eventRender: function(event, element) {
                    if (event.publicHoliday) {
                        publicHolidays.push(event.start.format("YYYY-MM-DD"));
                    }
                    if (event.icon && event.title === 'Urlaub') {
                        element.css('background-color','#2ecc71');
                    }
                    if(event.icon){
                        element.find(".fc-title").prepend("<i class='fa fa-"+event.icon+"'></i> ");
                    }
                },
                editable: true,
                viewRender : function(view, element) {
                    $('#datetimepicker1').data('DateTimePicker').date($('#calendar').fullCalendar('getDate'));
                },
                eventSources: [
                    {
                        url: "{{ path('expenses_workday_loadWorkdaysByMonth_get', {'employee_id':employee.id}) }}",
                        success: function(msg){
                            var json = {'tasks':msg};
                            draw_json_workdays(json)
                        }
                    },
                    {
                        url: "{{ path('calendar_jsonpublicholidays')}}",
                    },
                    {
                        url: "{{ path('absence_json_background',{id:employee.id})}}",
                    },
                ],
                loading: function(isLoading, view) {
                    if(isLoading) {
                        $('#modal-content').html('<img src="/bundles/vehicle/css/graphics/loader.white.gif" />');
                        $('#modal').modal();
                    } else {
                        $('#modal').modal('hide');
                    }
                }
            });

            geocoder = new google.maps.Geocoder;

            $('#workday-submit').on('click', function(e){
            	swal({
					title: 'Spesenantrag einreichen',
					text: "Sind Sie sich sicher, dass Sie den Antrag einreichen wollen?",
					type: 'warning',
					showCancelButton: true,
					confirmButtonColor: '#3085d6',
					cancelButtonColor: '#d33',
					cancelButtonText: 'Nein',
					confirmButtonText: 'Ja'
            	}).then((result) => {
                	if (result.value) {
						var datepicker = $('#datetimepicker1').data('DateTimePicker').date().toISOString();
						$.ajax({
							method: "POST",
							url: '/expenses/employee/'+{{employee.id}}+'/submit',
							data: {
								current: datepicker
							}
						})
						.done(function( msg ) {
							console.log(msg);
								if(msg.success === true){
								$('#workday-submit').prop("disabled",true);
								swal(
									'Spesenantrag',
									'Spesenantrag erfolgreich eingereicht.',
									'success'
								);
							}
						});
                	}
				});
            });

            function checkExpense(employee, date){
				date = new moment(date).toISOString();
				var output;
				$.ajax({
					method: "POST",
					url: '/expenses/employee/'+employee+'/check',
					async: false,
					data: {
						current: date
					}
				})
				.done(function( msg ) {
					output = msg.success;
					// if(msg.success === true){
					//   $(selectorToRemove).remove();
					// }
				});
				return output;
            }
        });
    </script>
{% endblock %}
