<?php

namespace AbsenceBundle\Repository;

use Doctrine\DBAL\Connection;

/**
 * AbsenceDetailClearingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AbsenceDetailClearingRepository extends \Doctrine\ORM\EntityRepository
{
    public function getHalfDays($absence)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('a')
          ->from('AbsenceBundle:AbsenceDetailClearing', 'a')
          ->andWhere('a.absence = :absence')
          ->andWhere('a.dayDetail < 1')
          ->setParameters(array(
              'absence' => $absence,
          ));
        return $qb->getQuery()->getArrayResult();
    }

    public function findAllOverlapping()
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('IDENTITY(a.employee), a.date, COUNT(a.date)')
          ->from('AbsenceBundle:AbsenceDetailClearing', 'a')
          ->groupBy('a.employee, a.date')
          ->having('COUNT(a.date) > 1');
        return $qb->getQuery()->getArrayResult();
    }

    public function findAllAbsenceDetailClearings($employee, $start, $end)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('a')
          ->from('AbsenceBundle:AbsenceDetailClearing', 'a')
          ->where('a.employee = :employee')
          ->andWhere('a.date BETWEEN :start AND :end or a.date = :start or a.date = :end')
          ->setParameters(array(
              'employee' => $employee,
              'start' => $start,
              'end' => $end
          ));
        return $qb->getQuery()->getArrayResult();
    }

    public function findAllWithAbsenceAbsenceDetailClearings($employee, $start, $end, $absence)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('a')
          ->from('AbsenceBundle:AbsenceDetailClearing', 'a')
          ->where('a.employee = :employee')
          ->andWhere('a.absence = :absence')
          ->andWhere('a.date BETWEEN :start AND :end')
          ->setParameters(array(
              'employee' => $employee,
              'absence' => $absence,
              'start' => $start,
              'end' => $end
          ));
        return $qb->getQuery()->getArrayResult();
    }

    public function findAllSumWithAbsenceAbsenceDetailClearings($employee, $absence)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('SUM(a.dayDetail)')
          ->from('AbsenceBundle:AbsenceDetailClearing', 'a')
          ->where('a.employee = :employee')
          ->andWhere('a.absence = :absence')
          ->setParameters(array(
              'employee' => $employee,
              'absence' => $absence,
          ));
        return $qb->getQuery()->getSingleScalarResult();
    }

    public function findAllAbsenceDetailClearingsByYear($year, $employee)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('a')
            ->from('AbsenceBundle:AbsenceDetailClearing', 'a')
            ->where('a.employee = :employee')
            ->andWhere('YEAR(a.date) = :year')
            ->setParameters(array(
                'employee' => $employee,
                'year' => $year,
            ));
        return $qb->getQuery()->getArrayResult();
    }

    public function getSumAllAbsenceDetailClearingsByYear($year, $employee)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('SUM(a.dayDetail)')
            ->from('AbsenceBundle:AbsenceDetailClearing', 'a')
            ->where('a.employee = :employee')
            ->andWhere('YEAR(a.date) = :year')
            ->setParameters(array(
                'employee' => $employee,
                'year' => $year,
            ));
        return floatval($qb->getQuery()->getSingleScalarResult());
    }

    public function getSumHolidaysAbsenceDetailClearingsByYear($year, $employee)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('SUM(a.dayDetail)')
            ->from('AbsenceBundle:AbsenceDetailClearing', 'a')
            ->where('a.employee = :employee')
            ->andWhere('YEAR(a.date) = :year')
            ->andWhere('a.UseAsHolidays = 1')
            ->setParameters(array(
                'employee' => $employee,
                'year' => $year,
            ));
        return floatval($qb->getQuery()->getSingleScalarResult());
    }

    public function findSumAllAbsenceDetailClearingsByStartAndEnd($employee, $start, $end)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('SUM(a.dayDetail)')
          ->from('AbsenceBundle:AbsenceDetailClearing', 'a')
          ->where('a.employee = :employee')
          ->andWhere('a.date BETWEEN :start AND :end')
          ->setParameters(array(
              'employee' => $employee,
              'start' => $start,
              'end' => $end
          ));
        return floatval($qb->getQuery()->getSingleScalarResult());
    }

    public function findSumAllAbsenceDetailClearingsByStartAndEndUseAsHoliday($employee, $start, $end)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('SUM(a.dayDetail)')
          ->from('AbsenceBundle:AbsenceDetailClearing', 'a')
          ->where('a.employee = :employee')
          ->andWhere('a.date BETWEEN :start AND :end')
          ->andWhere('a.UseAsHolidays = 1')
          ->setParameters(array(
              'employee' => $employee,
              'start' => $start,
              'end' => $end
          ));
        return floatval($qb->getQuery()->getSingleScalarResult());
    }

    public function findSumHolidaysAbsenceDetailClearingsByStartAndEnd($employee, $start, $end)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('SUM(a.dayDetail)')
          ->from('AbsenceBundle:AbsenceDetailClearing', 'a')
          ->where('a.employee = :employee')
          ->andWhere('a.UseAsHolidays = 1')
          ->andWhere('a.date BETWEEN :start AND :end')
          ->setParameters(array(
              'employee' => $employee,
              'start' => $start,
              'end' => $end
          ));
        return floatval($qb->getQuery()->getSingleScalarResult());
    }

    public function findAbsenceDetailClearingIdsByAbsence(\AbsenceBundle\Entity\Absence $absence)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('a.id')
            ->from('AbsenceBundle:AbsenceDetailClearing', 'a')
            ->where('a.date BETWEEN :start AND :end')
            ->setParameters(array(
                'start' => $absence->getFromDate(),
                'end' => $absence->getToDate(),
            ));
        $result = $qb->getQuery()->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        return array_column($result, 'id');
    }

    public function removeAbsenceDetailClearings(array $ids)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->delete('AbsenceBundle:AbsenceDetailClearing', 'a')
            ->where('a.id in (:ids)')
            ->setParameter(':ids', $ids, Connection::PARAM_INT_ARRAY);
        $qb->getQuery()->getResult();
    }

    public function findByReason($id,$date,$reason)
    {
        return $this->getEntityManager()
            ->createQuery(
                "SELECT e FROM AbsenceBundle:AbsenceDetailClearing e WHERE e.employee = '".$id."' AND e.date = '".$date."' AND e.reason = '".$reason."' "
            )
            ->setMaxResults(1)
            ->getOneOrNullResult();

    }

    public function findByEmployeeId($employeeId,$start,$end)
    {
        return $this->getEntityManager()
            ->createQuery(
                "SELECT e FROM AbsenceBundle:AbsenceDetailClearing e WHERE e.employee = '".$employeeId."' AND e.date BETWEEN '".($start)."' AND '".($end)."'"
            )
            ->getResult();

    }
    public function findSchool($id,$date)
    {
        return $this->getEntityManager()
            ->createQuery(
                "SELECT e FROM AbsenceBundle:AbsenceDetailClearing e WHERE e.employee = '".$id."' AND e.date = '".$date."' AND e.reason in (11,12,13,14,15,18,20,34,35,36,37,38,39)"
            )
            ->getOneOrNullResult();

    }

    public function findErrors()
    {
      $query =  "SELECT * FROM (SELECT count(id) as counter, date, employee_id,reason_id FROM absence_detail_clearing group by date, employee_id,reason_id )AS dA where counter > 1 AND date > '2019-01-01'";
      $connection = $this->_em->getConnection();
      $statement = $connection->prepare($query);
      $statement->execute();
      return $statement->fetchAll();
    }
    public function getByEmployeeKUG($start,$end)
    {
        return $this->getEntityManager()
            ->createQuery(
                "SELECT  e, SUM(e.dayDetail) FROM AbsenceBundle:AbsenceDetailClearing e WHERE e.reason = 52 AND e.date >= '".($start)."' AND e.date < '".($end)."' group by e.employee"
            )
            ->getResult();
    }
}
