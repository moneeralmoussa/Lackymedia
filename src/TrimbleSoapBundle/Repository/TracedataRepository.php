<?php

namespace TrimbleSoapBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * TracedataRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TracedataRepository extends EntityRepository
{
    public function findAllBySourceDate($source, $begin, $end, $sort = 'time', $direction = 'desc', $limit = 150) {
        return $this->createQueryBuilder('td')
                ->andWhere("td.source='".$source."' AND td.time >= '".$begin."' AND td.time < '".$end."'")
                ->orderBy("td.".$sort, $direction)
                ->getQuery()
                ->getResult();
    }

    public function findOneBySourceExactdate($source, $date, $sort = 'time', $direction = 'asc') {
        return $this->createQueryBuilder('td')
                ->andWhere("td.source='".$source."' AND td.time = '".$date."'")
                ->orderBy("td.".$sort, $direction)
                ->setMaxResults( 1 )
                ->getQuery()
                ->getOneOrNullResult();
    }

    public function findSmalleroneBySourceExactdate($source, $date, $sort = 'time', $direction = 'desc') {
        return $this->createQueryBuilder('td')
                ->andWhere("td.source='".$source."' AND td.time <= '".$date."'")
                ->orderBy("td.".$sort, $direction)
                ->setMaxResults( 1 )
                ->getQuery()
                ->getOneOrNullResult();
    }

    public function findBiggeroneBySourceExactdate($source, $date, $sort = 'time', $direction = 'asc') {
        return $this->createQueryBuilder('td')
                ->andWhere("td.source='".$source."' AND td.time >= '".$date."'")
                ->orderBy("td.".$sort, $direction)
                ->setMaxResults( 1 )
                ->getQuery()
                ->getOneOrNullResult();
    }

    public function findAllWithDriverBySourceDate($source, $begin, $end, $sort = 'time', $direction = 'asc') {
        return $this->createQueryBuilder('td')
                ->andWhere("td.did IS NOT NULL AND td.source='".$source."' AND td.time >= '".$begin."' AND td.time < '".$end."'")
                ->orderBy("td.".$sort, $direction)
                ->getQuery()
                ->getResult();
    }

    public function findAllLoginLogout($begin, $end) {
        return $this->createQueryBuilder('td')
                ->andWhere("(td.type='1' OR td.type='2') AND td.time >= '".$begin."' AND td.time < '".$end."'")
                ->getQuery()
                ->getResult();
    }

    public function findByMonth($employee_id, $begin, $end, $sort = 'time', $direction = 'asc') {
        $ret = $this->createQueryBuilder('td')
                ->andWhere("td.did IN (?1) AND td.time >= ?2 AND td.time < ?3")
                ->setParameter(1, $employee_id)
                ->setParameter(2, $begin)
                ->setParameter(3, $end)
                ->orderBy("td.".$sort, $direction)
                ->getQuery()//;var_dump($ret->getSQL());die();
                ->getResult();
        return $ret;
    }

    public function findAllActivityDatesBySource($source) {
        return $this->createQueryBuilder('td')
                ->select("td.time")
                ->andWhere("td.source='".$source."'")
                ->distinct()
                ->orderBy("td.time", "DESC")
                ->getQuery()
                ->getResult();
    }

    public function findAllWithTypeBySourceDate($source, $begin, $end, $type=[], $sort = 'time', $direction = 'asc') {
        $ret = $this->createQueryBuilder('td')
                ->andWhere("td.source='".$source."' AND td.time >= '".$begin."' AND td.time < '".$end."'")
                ->orderBy("td.".$sort, $direction);

        if(!empty($type)) {
            $ret->andWhere("td.type IN (:type)")->setParameter('type', $type);
        }

        return $ret->getQuery()
                ->getResult();
    }

    public function findAllWithTypeBySourceMileage($source, $begin, $end, $type=[], $sort = 'time', $direction = 'asc') {
        $ret = $this->createQueryBuilder('td')
                ->andWhere("td.source='".$source."' AND td.mileage >= '".$begin."' AND td.mileage <= '".$end."'")
                ->orderBy("td.".$sort, $direction);

        if(!empty($type)) {
            $ret->andWhere("td.type IN (:type)")->setParameter('type', $type);
        }

        return $ret->getQuery()
                ->getResult();
    }

    public function findLoginLogoutMode($begin, $end, $source) {
        return $this->createQueryBuilder('td')
                ->select('td.source, td.type, td.did as driver, td.time, td.mileage, tdp.propertyValue')
                ->andWhere("(td.type='1' OR td.type='2') AND td.time >= :begin AND td.time < :end AND td.source = :source")
                ->leftJoin(
                    "td.tracedataproperties",
                    "tdp",
                    \Doctrine\ORM\Query\Expr\Join::WITH,
                    "tdp.propertyKey = :mode"
                )
                ->setParameter('begin', $begin)
                ->setParameter('end', $end)
                ->setParameter('source', $source)
                ->setParameter('mode', 'MODE')
                ->orderBy('td.mileage, td.time', 'ASC')
                ->getQuery()
                ->getResult();
    }
    public function findConsumptionMinMaxByDate($begin, $end) {
        $ret = $this->createQueryBuilder('td')
                ->select("td.source, GROUP_CONCAT(DISTINCT td.did) as driver, min(td.time) as realbegin, max(td.time) as realend, min(td.mileage) as startkm, max(td.mileage) as endkm, min(tdp.propertyValue) as startconsumption, max(tdp.propertyValue) as endconsumption")
                ->andWhere("td.time >= :begin AND td.time < :end")
                ->leftJoin(
                    "td.tracedataproperties",
                    "tdp",
                    \Doctrine\ORM\Query\Expr\Join::WITH,
                    "tdp.propertyKey = :tfu"
                )
                ->groupBy("td.source")
                ->setParameter('begin', $begin)
                ->setParameter('end', $end)
                ->setParameter('tfu', 'TFU')
                ->getQuery()//;var_dump($ret->getSQL());die();
                ->getResult();
        return $ret;
    }
    public function findConsumptionMinMaxBySourceMileage($begin, $end, $source) {
        $ret = $this->createQueryBuilder('td')
                ->select("td.source, min(td.time) as realbegin, max(td.time) as realend, min(td.mileage) as startkm, max(td.mileage) as endkm, min(tdp.propertyValue) as startconsumption, max(tdp.propertyValue) as endconsumption")
                ->andWhere("td.mileage >= :begin AND td.mileage <= :end AND td.source = :source")
                ->leftJoin(
                    "td.tracedataproperties",
                    "tdp",
                    \Doctrine\ORM\Query\Expr\Join::WITH,
                    "tdp.propertyKey = :tfu"
                )
                ->groupBy("td.source")
                ->setParameter('begin', $begin)
                ->setParameter('end', $end)
                ->setParameter('source', $source)
                ->setParameter('tfu', 'TFU')
                ->getQuery()//;var_dump($ret->getSQL());die();
                ->getOneOrNullResult();
        return $ret;
    }
    public function findByTypeLoginLogout($last_id)
    {
        return $this->getEntityManager()
            ->createQuery(
                "SELECT e FROM TrimbleSoapBundle:Tracedata e WHERE e.id > '".$last_id."' and e.type in (1,2)"
            )
            ->getResult();
    }
    public function findLocation($id,$did)
    {
        return $this->getEntityManager()
            ->createQuery(
                "SELECT e FROM TrimbleSoapBundle:Tracedata e WHERE e.id > '".$id."' AND e.did = '".$did."' AND e.lon IS NOT NULL AND e.lat IS NOT NULL AND e.mileage IS NOT NULL " 
            )
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

}
