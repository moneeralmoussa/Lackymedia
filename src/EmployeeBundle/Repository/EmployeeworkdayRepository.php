<?php
namespace EmployeeBundle\Repository;
/**
 * employeeworkdayRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EmployeeworkdayRepository extends \Doctrine\ORM\EntityRepository
{
    public function checksession($id)
    {
        $now=(new \DateTime())->format('Y-m-d');
        return $this->getEntityManager()
            ->createQuery(
                "SELECT e FROM EmployeeBundle:Employeeworkday e WHERE e.employeeId = '".$id."' AND e.deletedAt IS NULL AND e.beginEmployeepositionDate LIKE '".$now."%'"
            )
        ->getOneOrNullResult();
    }

    public function checksessiondate($id,$date)
    {
        return $this->getEntityManager()
            ->createQuery(
                "SELECT e FROM EmployeeBundle:Employeeworkday e WHERE e.employeeId = '".$id."' AND e.deletedAt IS NULL AND e.beginEmployeepositionDate LIKE '".$date."%'"
            )
        ->getOneOrNullResult();
    }

    function findbyMonth($id,$date)
    {
        $now=(new \DateTime($date))->format('Y-m-d');
        return $this->getEntityManager()
            ->createQuery(
                "SELECT e FROM EmployeeBundle:Employeeworkday e WHERE e.employeeId = '".$id."'AND e.endEmployeepositionDate IS NOT NULL AND e.deletedAt IS NULL AND e.beginEmployeepositionDate LIKE '".$now."%'"
            )
            ->getOneOrNullResult();
    }

    public function getAllAvailable()
    {
        return $this->getEntityManager()
            ->createQuery(
                "SELECT e FROM EmployeeBundle:Employeeworkday e WHERE (e.statusBeginId = '2' OR  e.statusEndId = '2') AND e.deletedAt IS NULL "
            )
            ->getResult();
    }

    public function checksessionWithStatusInBearbeitung($id)
    {
        $now=(new \DateTime())->format('Y-m-d');
        return $this->getEntityManager()
            ->createQuery(
                "SELECT e FROM EmployeeBundle:Employeeworkday e WHERE e.employeeId = '".$id."' AND e.deletedAt IS NULL AND (e.statusBeginId = '3' or e.statusEndId ='3' )AND e.beginEmployeepositionDate LIKE '".$now."%'"
            )
            ->getOneOrNullResult();
    }

    function findbyMonthjson($id,$date)
    {
        $now=(new \DateTime($date))->format('Y-m');
        return $this->getEntityManager()
            ->createQuery(
                "SELECT e FROM EmployeeBundle:Employeeworkday e WHERE e.employeeId = '".$id."'AND e.endEmployeepositionDate IS NOT NULL AND e.deletedAt IS NULL AND e.beginEmployeepositionDate LIKE '".$now."%'"
            )
            ->getResult();
    }

    function checkByDate($id,$date)
    {
        return $this->getEntityManager()
            ->createQuery(
                "SELECT e FROM EmployeeBundle:Employeeworkday e WHERE e.employeeId = '".$id."'AND e.endEmployeepositionDate IS NOT NULL AND e.deletedAt IS NULL AND  e.endEmployeepositionDate > '".$date."%' AND e.beginEmployeepositionDate < '".$date."%'"
            )
            ->getResult();
    }

    public function checkByDateForEditFunction($id,$date)
    {  // for edit function,
        $date=$date->format('Y-m-d H:i:s');
        return $this->getEntityManager()
            ->createQuery(
                "SELECT e FROM EmployeeBundle:Employeeworkday e WHERE e.id = '".$id."' AND e.beginEmployeepositionDate <= '".$date."' AND e.endEmployeepositionDate >= '".$date."' AND e.deletedAt IS NULL"
            )
            ->getOneOrNullResult();
    }

    public function findbyMonthWithOutEnd($id,$date)
    {
        $now=(new \DateTime($date))->format('Y-m-d');
        return $this->getEntityManager()
            ->createQuery(
                "SELECT e FROM EmployeeBundle:Employeeworkday e WHERE e.employeeId = '".$id."' AND e.deletedAt IS NULL AND e.beginEmployeepositionDate LIKE '".$now."%'"
            )
            ->getOneOrNullResult();
    }
}
