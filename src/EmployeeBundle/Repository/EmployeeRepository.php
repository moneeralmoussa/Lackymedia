<?php

namespace EmployeeBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * EmployeeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EmployeeRepository extends EntityRepository
{
    public function findByTrimbleId($trimbleId)
    {
        return $this->createQueryBuilder('l')
            ->andWhere('l.trimbleId = ?1')->setParameter(1, $trimbleId)
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function getAllSoftDeleted()
    {
        $delete_date=(new \DateTime())->format('Y-m-d H:i:s');
        return $this->getEntityManager()
            ->createQuery(
                "SELECT e FROM EmployeeBundle:Employee e WHERE e.trimbleId IS NOT NULL AND e.deleted_at IS NOT NULL AND e.deleted_at < '".$delete_date."'"
            )
            ->getResult();
    }

    public function getAllAvailable($delete_date=false)
    {
        if (!$delete_date) {
            $delete_date=(new \DateTime())->format('Y-m-d H:i:s');
        }
        return $this->getEntityManager()
            ->createQuery(
                "SELECT e FROM EmployeeBundle:Employee e WHERE e.deleted_at IS NULL OR e.deleted_at >= '".$delete_date."' ORDER BY e.name, e.prename ASC"
            )
            ->getResult();
    }

    public function getAllDriversAvailable($delete_date=false)
    {
        if (!$delete_date) {
            $delete_date=(new \DateTime())->format('Y-m-d H:i:s');
        }
        return $this->getEntityManager()
            ->createQuery(
                "SELECT e FROM EmployeeBundle:Employee e WHERE e.department IN (3,4) AND (e.deleted_at IS NULL OR e.deleted_at >= '".$delete_date."') ORDER BY e.name, e.prename ASC"
            )
            ->getResult();
    }

    public function getAllAvailableSortedByDepartment()
    {
        $delete_date=(new \DateTime())->format('Y-m-d H:i:s');
        return $this->getEntityManager()
            ->createQuery(
                "SELECT e FROM EmployeeBundle:Employee e LEFT JOIN e.department d WHERE e.deleted_at IS NULL OR e.deleted_at >= '".$delete_date."' ORDER BY d.name, e.name, e.prename ASC"
            )
            ->getResult();
    }

    public function getLatestBirthdays($number=7)
    {
        $delete_date=(new \DateTime())->format('Y-m-d H:i:s');
        $em = $this->getEntityManager();
           $connection = $em->getConnection();
           $statement = $connection->prepare(
             "SELECT * FROM employee u	WHERE (u.deleted_at IS NULL OR u.deleted_at >= '".$delete_date."') AND DATE_ADD(u.birthday,INTERVAL YEAR(DATE_ADD(CURDATE(), INTERVAL -".$number." DAY))-YEAR(u.birthday) + IF(MONTH(DATE_ADD(CURDATE(), INTERVAL -".$number." DAY)) > MONTH(u.birthday), 1, IF(MONTH(DATE_ADD(CURDATE(), INTERVAL -".$number." DAY)) = MONTH(u.birthday) AND DAY(DATE_ADD(CURDATE(), INTERVAL -".$number." DAY)) > DAY(u.birthday), 1, 0)) YEAR) BETWEEN DATE_ADD(CURDATE(), INTERVAL -".$number." DAY) AND DATE_ADD(CURDATE(), INTERVAL ".$number." DAY) ORDER BY MONTH(u.birthday)ASC, DAY(u.birthday) ASC");
             $statement->execute();
        $employees = $statement->fetchAll();
        return array_values($employees);
    }

    public function getLatestBirthdaysOld($number=7)
       {
           $delete_date=(new \DateTime())->format('Y-m-d H:i:s');
           $rsm = new ResultSetMapping;
           $rsm->addEntityResult('EmployeeBundle:Employee', 'u');
           $rsm->addFieldResult('u', 'id', 'id');
           $rsm->addFieldResult('u', 'prename', 'prename');
           $rsm->addFieldResult('u', 'name', 'name');
           $rsm->addFieldResult('u', 'birthday', 'birthday');
           $query = $this->getEntityManager()->createNativeQuery(
               "SELECT * FROM employee u
   			WHERE (u.deleted_at IS NULL OR u.deleted_at >= :deleted_date)
   			AND DATE_ADD(u.birthday,INTERVAL YEAR(DATE_ADD(CURDATE(), INTERVAL -:zahl DAY))-YEAR(u.birthday)
   			+ IF(MONTH(DATE_ADD(CURDATE(), INTERVAL -:zahl DAY)) > MONTH(u.birthday), 1, IF(MONTH(DATE_ADD(CURDATE(), INTERVAL -:zahl DAY)) = MONTH(u.birthday) AND DAY(DATE_ADD(CURDATE(), INTERVAL -:zahl DAY)) > DAY(u.birthday), 1, 0)) YEAR)
   			BETWEEN DATE_ADD(CURDATE(), INTERVAL -:zahl DAY) AND DATE_ADD(CURDATE(), INTERVAL :zahl DAY)
   			ORDER BY MONTH(u.birthday) ASC, DAY(u.birthday) ASC",
               $rsm
           );

           $query->setParameter('deleted_date', $delete_date);
           $query->setParameter('zahl', $number);
           $employees = $query->getResult();
           $tmpEmployees = $employees;

           foreach ($tmpEmployees as $key => $employee) {
               $oBirthday = $employee->getBirthday()->format('md');
               $oCurrentDate = (new \DateTime())->format('md');

               if ($oCurrentDate > $oBirthday) {
                   $element = $employees[$key];
                   unset($employees[$key]);
                   array_push($employees, $element);
               }
           }

           return array_values($employees);
       }

    public function getAllAvailableVehicleLogBlocked($delete_date=false)
    {
        if (!$delete_date) {
            $delete_date=(new \DateTime())->format('Y-m-d H:i:s');
        }
        return $this->getEntityManager()
            ->createQuery(
                "SELECT e FROM EmployeeBundle:Employee e WHERE (e.deleted_at IS NULL OR e.deleted_at >= '".$delete_date."') AND e.vehicleLogBlocked IS NOT NULL ORDER BY e.name, e.prename ASC"
            )
            ->getResult();
    }
    public function getFindAllExpenses()
    {

        return $this->getEntityManager()
            ->createQuery(
                "SELECT e FROM EmployeeBundle:Employee e WHERE e.trimbleId IS NOT NULL AND e.department IN (3,4,12,13,14,15,17,18,19,20) "
            )
            ->getResult();
    }

    public function getAllSoftDeletedExpenses()
    {
        $delete_date=(new \DateTime())->format('Y-m-d H:i:s');
        return $this->getEntityManager()
            ->createQuery(
                "SELECT e FROM EmployeeBundle:Employee e WHERE e.trimbleId IS NOT NULL AND e.deleted_at IS NOT NULL AND e.deleted_at < '".$delete_date."' AND e.department IN (3,4,12,13,14,15,17,18,19,20) "
            )
            ->getResult();
    }

    public function getAllAvailableExpenses($delete_date=false)
    {
        if (!$delete_date) {
            $delete_date=(new \DateTime())->format('Y-m-d H:i:s');
        }
        return $this->getEntityManager()
            ->createQuery(
                "SELECT e FROM EmployeeBundle:Employee e WHERE e.deleted_at IS NULL OR e.deleted_at >= '".$delete_date."' AND e.department IN (3,4,12,13,14,15,17,18,19)  ORDER BY e.name, e.prename ASC"
            )
            ->getResult();
    }

    public function getAllAvailableNotDriver($delete_date=false)
    {
        if (!$delete_date) {
            $delete_date=(new \DateTime())->format('Y-m-d H:i:s');
        }
        return $this->getEntityManager()
            ->createQuery(
                "SELECT e FROM EmployeeBundle:Employee e WHERE e.department IN  (1,2,4,5,6,7,8,9,11,13,15,18,21) AND (e.deleted_at IS NULL OR e.deleted_at >= '".$delete_date."' ) ORDER BY e.name, e.prename ASC"
            )
            ->getResult();
    }

    public function getAllAvailableAzubi($delete_date=false)
    {
        if (!$delete_date) {
            $delete_date=(new \DateTime())->format('Y-m-d H:i:s');
        }
        return $this->getEntityManager()
            ->createQuery(
                "SELECT e FROM EmployeeBundle:Employee e WHERE e.deleted_at IS NULL OR e.deleted_at >= '".$delete_date."' AND e.department IN (4)  ORDER BY e.name, e.prename ASC"
            )
            ->getResult();
    }
    public function getAllAvailableDialog($delete_date=false)
    {
        if (!$delete_date) {
            $delete_date=(new \DateTime())->format('Y-m-d H:i:s');
        }
        return $this->getEntityManager()
            ->createQuery(
                "SELECT e FROM EmployeeBundle:Employee e WHERE e.deleted_at IS NULL OR e.deleted_at >= '".$delete_date."' AND e.department IN (10)  ORDER BY e.name, e.prename ASC"
            )
            ->getResult();
    }
    public function getAllEmployeeByDepartment($department_id)
    {
        $delete_date=(new \DateTime())->format('Y-m-d H:i:s');
        return $this->getEntityManager()
            ->createQuery(
                "SELECT e FROM EmployeeBundle:Employee e WHERE e.department =".$department_id." AND (e.deleted_at IS NULL OR e.deleted_at >= '".$delete_date."') ORDER BY e.name, e.prename ASC"
            )
            ->getResult();
    }
}
