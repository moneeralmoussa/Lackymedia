<?php

namespace VehicleBundle\Repository;

use VehicleBundle\Entity\Consumption;


/**
 * ConsumptionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ConsumptionRepository extends \Doctrine\ORM\EntityRepository
{
    public function findLatest() {
        return $this->createQueryBuilder('l')
                ->andWhere('l.deleted_at IS NULL')
                ->orderBy('l.consumptionEndTime', 'DESC')
                ->setMaxResults(1)
                ->getQuery()
                ->getOneOrNullResult();
    }

    public function findByVehicleDate($vehicle,$date){
        return $this->createQueryBuilder('l')
                ->andWhere('l.vehicle = :vehicle')->setParameter('vehicle', $vehicle)
                ->andWhere(':date BETWEEN l.consumptionBeginTime AND l.consumptionEndTime')->setParameter('date', $date)
                ->andWhere('l.deleted_at IS NULL')
                ->getQuery()
                ->getResult();
    }

    public function findAllLatest() {
        $max_consumption = $this->findLatest();

        if(empty($max_consumption)) {
            return null;
        }

        return $this->createQueryBuilder('l')
                ->andWhere('l.consumptionEndTime = ?1 AND l.deleted_at IS NULL')->setParameter(1, $max_consumption->getConsumptionEndTime())
                ->getQuery()
                ->getResult();
    }

    public function findAllByDate($startdate, $enddate){
    	return $this->createQueryBuilder('l')
			->where('l.consumptionBeginTime >= :startdate')->setParameter('startdate', $startdate)
			->andWhere('l.consumptionEndTime <= :enddate')->setParameter('enddate', $enddate)
			->andWhere('l.deleted_at IS NULL')
			->getQuery()
			->getResult();
    }

    public function findAllReportDates(){
    	return $this->createQueryBuilder('l')
			->select('l.consumptionBeginTime', 'l.consumptionEndTime')
			->distinct()
			->getQuery()
			->getResult();
    }

    public function findByDriver($id) {
        $max_consumption = $this->createQueryBuilder('l')
			->where('l.driver = :id')
			->setParameter('id', $id)
			->andWhere('l.deleted_at IS NULL')
			->orderBy('l.consumptionEndTime', 'DESC')
			->setMaxResults(1)
			->getQuery()
			->getOneOrNullResult();

        if (empty($max_consumption)) {
            return null;
        }

        return $this->createQueryBuilder('l')
                ->where('l.driver = :id')
                ->andWhere('l.consumptionEndTime = ?1 AND l.deleted_at IS NULL')
                ->setParameter(1, $max_consumption->getConsumptionEndTime())
                ->setParameter('id', $id)
                ->getQuery()
                ->getResult();
	}

    public function findAllByDriver($id) {

        return $this->createQueryBuilder('l')
                ->where('l.driver = :id')
                ->andWhere('l.deleted_at IS NULL')
				->setParameter('id', $id)
				->orderBy('l.consumptionEndTime', 'DESC')
                ->getQuery()
                ->getResult();
    }

    public function getAllAverageConsumptions($id) {
        $driverConsumptions = $this->createQueryBuilder('l')
            ->where('l.driver = :id')
            ->andWhere('l.deleted_at IS NULL')
            ->setParameter('id', $id)
            ->getQuery()
            ->getResult();

        $avgDistance = 0.00;
        $avgConsumptionOn100km = 0.00;
        $avgConsumption = 0.00;
        $avgCruiseControl = 0.00;
        $avgFreeWheel = 0.00;
        $avgNDrive = 0.00;
        $avgDrivenToFast = 0.00;

        foreach ($driverConsumptions as $consumption) {
            // Durchschnittliche Strecke in km
            if ($consumption->getDetailByLabel('Strecke-KM')) {
                $avgDistance += $consumption->getDetailByLabel('Strecke-KM')->getValue();
            } else if ($consumption->getDetailByLabel('End-KM') && $consumption->getDetailByLabel('Start-KM')) {
                $avgDistance += ($consumption->getDetailByLabel('End-KM')->getValue() - $consumption->getDetailByLabel('Start-KM')->getValue());
            } else {
                $avgDistance += 0;
            }

            // Durschnittlicher Verbrauch Liter auf 100km
            if ($consumption->getDetailByLabel('Kraftstoffverbrauch beim Fahren')
            && ($consumption->getDetailByLabel('Strecke-KM'))
            && ($consumption->getDetailByLabel('Strecke-KM')->getValue() > 0)) {
                $avgConsumptionOn100km += $consumption->getDetailByLabel('Kraftstoffverbrauch beim Fahren')->getValue();
            } else {
                $avgConsumptionOn100km += 00.0;
            }

            // Durchschnittlicher Verbrauch in Liter
            if ($consumption->getDetailByLabel('Kraftstoffverbrauch beim Fahren')
            && ($consumption->getDetailByLabel('Strecke-KM'))
            && ($consumption->getDetailByLabel('Strecke-KM')->getValue() > 0)) {
                $avgConsumption += (($consumption->getDetailByLabel('Kraftstoffverbrauch beim Fahren')->getValue()/100)*($consumption->getDetailByLabel('Strecke-KM')->getValue()));
            } else {
                $avgConsumption += 0.00;
            }

            // Durschnittliche Tempomat-Zeit in %
            if ($consumption->getDetailByLabel('Tempomat-Zeit')
            && ($consumption->getDetailByLabel('Strecke-KM'))
            && ($consumption->getDetailByLabel('Strecke-KM')->getValue() > 0)) {
                $avgCruiseControl += $consumption->getDetailByLabel('Tempomat-Zeit')->getValue();
            } else {
                $avgCruiseControl += 0.00;
            }

            // Durschnittliche Leerlauf-Zeit in %
            if ($consumption->getDetailByLabel('Zeit Motor im Leerlauf') && $consumption->getDetailByLabel('Stillstandzeit Nebenantrieb') && ($consumption->getDetailByLabel('Strecke-KM') && ($consumption->getDetailByLabel('Strecke-KM')->getValue() > 0))) {
                $avgFreeWheel += (($consumption->getDetailByLabel('Zeit Motor im Leerlauf')->getValue()) * (100 - $consumption->getDetailByLabel('Stillstandzeit Nebenantrieb')->getValue()) / 100);
            } else if ($consumption->getDetailByLabel('Zeit Motor im Leerlauf')
             && ($consumption->getDetailByLabel('Strecke-KM'))
             && ($consumption->getDetailByLabel('Strecke-KM')->getValue() > 0)) {
                $avgFreeWheel += $consumption->getDetailByLabel('Zeit Motor im Leerlauf')->getValue();
            } else {
                $avgFreeWheel += 0.00;
            }

            // Durschnittliche N-Antriebs-Zeit in %
            if ($consumption->getDetailByLabel('Zeit Motor im Leerlauf')
             && ($consumption->getDetailByLabel('Stillstandzeit Nebenantrieb'))
             && ($consumption->getDetailByLabel('Strecke-KM'))
             && ($consumption->getDetailByLabel('Strecke-KM')->getValue() > 0)) {
                $avgNDrive = (($consumption->getDetailByLabel('Zeit Motor im Leerlauf')->getValue()) * ($consumption->getDetailByLabel('Stillstandzeit Nebenantrieb')->getValue()) / 100);
            } else {
                $avgNDrive = 0.00;
            }

            if ($consumption->getDetailByLabel('zu schnell km')) {
                $avgDrivenToFast = $consumption->getDetailByLabel('zu schnell km')->getValue();
            }
        }


        if (empty($driverConsumptions)) {
            $numDriverConsumptions = 1;
        } else {
            $numDriverConsumptions = count($driverConsumptions);
        }
        $avgConsumptions = array(
            'avgDistance' => number_format($avgDistance /= $numDriverConsumptions, 0, ',', '.'),
            'avgConsumptionOn100km' => number_format($avgConsumptionOn100km /= $numDriverConsumptions, 1, ',', '.'),
            'avgConsumption' => number_format($avgConsumption /= $numDriverConsumptions, 1, ',', '.'),
            'avgCruiseControl' => number_format($avgCruiseControl /= $numDriverConsumptions, 1, ',', '.'),
            'avgFreeWheel' => number_format($avgFreeWheel /= $numDriverConsumptions, 1, ',', '.'),
            'avgNDrive' => number_format($avgNDrive /= $numDriverConsumptions, 1, ',', '.'),
            'avgDrivenToFast' => number_format($avgDrivenToFast /= $numDriverConsumptions, 3, ',', '.'),
        );

        return $avgConsumptions;
	}

	public function findAllWhereTrimbleIdIssetAndVehicleNull() {
        return $this->createQueryBuilder('l')
				->where('l.trimbleId <> \'\'')
				->andWhere('l.vehicle IS NULL')
                ->getQuery()
                ->getResult();
    }
    public function getOldConsumption($consumptionId , $driver)
    {
        return $this->createQueryBuilder('l')
        ->where('l.id < :consumptionId')
        ->andwhere('l.driver = :driver')
        ->setParameter('consumptionId', $consumptionId)
        ->setParameter('driver', $driver)
        ->orderBy('l.id', 'DESC')
        ->setMaxResults(1)
        ->getQuery()
        ->getOneOrNullResult();
    }
}
